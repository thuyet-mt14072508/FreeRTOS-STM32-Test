
002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c98  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08005e38  08005e38  00015e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fa4  08005fa4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005fa4  08005fa4  00015fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fac  08005fac  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fac  08005fac  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014488  20000014  08005fc8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001449c  08005fc8  0002449c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ca9  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000316b  00000000  00000000  00038ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  0003be58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  0003d138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c60  00000000  00000000  0003e2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014d12  00000000  00000000  00056f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aa0c  00000000  00000000  0006bc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010661e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004edc  00000000  00000000  00106674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e20 	.word	0x08005e20

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08005e20 	.word	0x08005e20

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200143f4 	.word	0x200143f4

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96e 	b.w	8000568 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468c      	mov	ip, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8083 	bne.w	80003ba <__udivmoddi4+0x116>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d947      	bls.n	800034a <__udivmoddi4+0xa6>
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	b142      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	f1c2 0020 	rsb	r0, r2, #32
 80002c4:	fa24 f000 	lsr.w	r0, r4, r0
 80002c8:	4091      	lsls	r1, r2
 80002ca:	4097      	lsls	r7, r2
 80002cc:	ea40 0c01 	orr.w	ip, r0, r1
 80002d0:	4094      	lsls	r4, r2
 80002d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fbbc f6f8 	udiv	r6, ip, r8
 80002dc:	fa1f fe87 	uxth.w	lr, r7
 80002e0:	fb08 c116 	mls	r1, r8, r6, ip
 80002e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e8:	fb06 f10e 	mul.w	r1, r6, lr
 80002ec:	4299      	cmp	r1, r3
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x60>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 8119 	bcs.w	800052c <__udivmoddi4+0x288>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 8116 	bls.w	800052c <__udivmoddi4+0x288>
 8000300:	3e02      	subs	r6, #2
 8000302:	443b      	add	r3, r7
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 fe0e 	mul.w	lr, r0, lr
 8000318:	45a6      	cmp	lr, r4
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x8c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	f080 8105 	bcs.w	8000530 <__udivmoddi4+0x28c>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f240 8102 	bls.w	8000530 <__udivmoddi4+0x28c>
 800032c:	3802      	subs	r0, #2
 800032e:	443c      	add	r4, r7
 8000330:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000334:	eba4 040e 	sub.w	r4, r4, lr
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa0>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xaa>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	2a00      	cmp	r2, #0
 8000354:	d150      	bne.n	80003f8 <__udivmoddi4+0x154>
 8000356:	1bcb      	subs	r3, r1, r7
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	fa1f f887 	uxth.w	r8, r7
 8000360:	2601      	movs	r6, #1
 8000362:	fbb3 fcfe 	udiv	ip, r3, lr
 8000366:	0c21      	lsrs	r1, r4, #16
 8000368:	fb0e 331c 	mls	r3, lr, ip, r3
 800036c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000370:	fb08 f30c 	mul.w	r3, r8, ip
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xe4>
 8000378:	1879      	adds	r1, r7, r1
 800037a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0xe2>
 8000380:	428b      	cmp	r3, r1
 8000382:	f200 80e9 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 8000386:	4684      	mov	ip, r0
 8000388:	1ac9      	subs	r1, r1, r3
 800038a:	b2a3      	uxth	r3, r4
 800038c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000390:	fb0e 1110 	mls	r1, lr, r0, r1
 8000394:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000398:	fb08 f800 	mul.w	r8, r8, r0
 800039c:	45a0      	cmp	r8, r4
 800039e:	d907      	bls.n	80003b0 <__udivmoddi4+0x10c>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x10a>
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	f200 80d9 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80003ae:	4618      	mov	r0, r3
 80003b0:	eba4 0408 	sub.w	r4, r4, r8
 80003b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b8:	e7bf      	b.n	800033a <__udivmoddi4+0x96>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0x12e>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80b1 	beq.w	8000526 <__udivmoddi4+0x282>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x1cc>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0x140>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80b8 	bhi.w	8000554 <__udivmoddi4+0x2b0>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0103 	sbc.w	r1, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	468c      	mov	ip, r1
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0a8      	beq.n	8000344 <__udivmoddi4+0xa0>
 80003f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f6:	e7a5      	b.n	8000344 <__udivmoddi4+0xa0>
 80003f8:	f1c2 0320 	rsb	r3, r2, #32
 80003fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000400:	4097      	lsls	r7, r2
 8000402:	fa01 f002 	lsl.w	r0, r1, r2
 8000406:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040a:	40d9      	lsrs	r1, r3
 800040c:	4330      	orrs	r0, r6
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	fbb1 f6fe 	udiv	r6, r1, lr
 8000414:	fa1f f887 	uxth.w	r8, r7
 8000418:	fb0e 1116 	mls	r1, lr, r6, r1
 800041c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000420:	fb06 f108 	mul.w	r1, r6, r8
 8000424:	4299      	cmp	r1, r3
 8000426:	fa04 f402 	lsl.w	r4, r4, r2
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x19c>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000432:	f080 808d 	bcs.w	8000550 <__udivmoddi4+0x2ac>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 808a 	bls.w	8000550 <__udivmoddi4+0x2ac>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b281      	uxth	r1, r0
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000450:	fb00 f308 	mul.w	r3, r0, r8
 8000454:	428b      	cmp	r3, r1
 8000456:	d907      	bls.n	8000468 <__udivmoddi4+0x1c4>
 8000458:	1879      	adds	r1, r7, r1
 800045a:	f100 3cff 	add.w	ip, r0, #4294967295
 800045e:	d273      	bcs.n	8000548 <__udivmoddi4+0x2a4>
 8000460:	428b      	cmp	r3, r1
 8000462:	d971      	bls.n	8000548 <__udivmoddi4+0x2a4>
 8000464:	3802      	subs	r0, #2
 8000466:	4439      	add	r1, r7
 8000468:	1acb      	subs	r3, r1, r3
 800046a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046e:	e778      	b.n	8000362 <__udivmoddi4+0xbe>
 8000470:	f1c6 0c20 	rsb	ip, r6, #32
 8000474:	fa03 f406 	lsl.w	r4, r3, r6
 8000478:	fa22 f30c 	lsr.w	r3, r2, ip
 800047c:	431c      	orrs	r4, r3
 800047e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800048a:	fa21 f10c 	lsr.w	r1, r1, ip
 800048e:	431f      	orrs	r7, r3
 8000490:	0c3b      	lsrs	r3, r7, #16
 8000492:	fbb1 f9fe 	udiv	r9, r1, lr
 8000496:	fa1f f884 	uxth.w	r8, r4
 800049a:	fb0e 1119 	mls	r1, lr, r9, r1
 800049e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004a2:	fb09 fa08 	mul.w	sl, r9, r8
 80004a6:	458a      	cmp	sl, r1
 80004a8:	fa02 f206 	lsl.w	r2, r2, r6
 80004ac:	fa00 f306 	lsl.w	r3, r0, r6
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x220>
 80004b2:	1861      	adds	r1, r4, r1
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	d248      	bcs.n	800054c <__udivmoddi4+0x2a8>
 80004ba:	458a      	cmp	sl, r1
 80004bc:	d946      	bls.n	800054c <__udivmoddi4+0x2a8>
 80004be:	f1a9 0902 	sub.w	r9, r9, #2
 80004c2:	4421      	add	r1, r4
 80004c4:	eba1 010a 	sub.w	r1, r1, sl
 80004c8:	b2bf      	uxth	r7, r7
 80004ca:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ce:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d6:	fb00 f808 	mul.w	r8, r0, r8
 80004da:	45b8      	cmp	r8, r7
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x24a>
 80004de:	19e7      	adds	r7, r4, r7
 80004e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e4:	d22e      	bcs.n	8000544 <__udivmoddi4+0x2a0>
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d92c      	bls.n	8000544 <__udivmoddi4+0x2a0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4427      	add	r7, r4
 80004ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f2:	eba7 0708 	sub.w	r7, r7, r8
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	454f      	cmp	r7, r9
 80004fc:	46c6      	mov	lr, r8
 80004fe:	4649      	mov	r1, r9
 8000500:	d31a      	bcc.n	8000538 <__udivmoddi4+0x294>
 8000502:	d017      	beq.n	8000534 <__udivmoddi4+0x290>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x27a>
 8000506:	ebb3 020e 	subs.w	r2, r3, lr
 800050a:	eb67 0701 	sbc.w	r7, r7, r1
 800050e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000512:	40f2      	lsrs	r2, r6
 8000514:	ea4c 0202 	orr.w	r2, ip, r2
 8000518:	40f7      	lsrs	r7, r6
 800051a:	e9c5 2700 	strd	r2, r7, [r5]
 800051e:	2600      	movs	r6, #0
 8000520:	4631      	mov	r1, r6
 8000522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e70b      	b.n	8000344 <__udivmoddi4+0xa0>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e9      	b.n	8000304 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fd      	b.n	8000330 <__udivmoddi4+0x8c>
 8000534:	4543      	cmp	r3, r8
 8000536:	d2e5      	bcs.n	8000504 <__udivmoddi4+0x260>
 8000538:	ebb8 0e02 	subs.w	lr, r8, r2
 800053c:	eb69 0104 	sbc.w	r1, r9, r4
 8000540:	3801      	subs	r0, #1
 8000542:	e7df      	b.n	8000504 <__udivmoddi4+0x260>
 8000544:	4608      	mov	r0, r1
 8000546:	e7d2      	b.n	80004ee <__udivmoddi4+0x24a>
 8000548:	4660      	mov	r0, ip
 800054a:	e78d      	b.n	8000468 <__udivmoddi4+0x1c4>
 800054c:	4681      	mov	r9, r0
 800054e:	e7b9      	b.n	80004c4 <__udivmoddi4+0x220>
 8000550:	4666      	mov	r6, ip
 8000552:	e775      	b.n	8000440 <__udivmoddi4+0x19c>
 8000554:	4630      	mov	r0, r6
 8000556:	e74a      	b.n	80003ee <__udivmoddi4+0x14a>
 8000558:	f1ac 0c02 	sub.w	ip, ip, #2
 800055c:	4439      	add	r1, r7
 800055e:	e713      	b.n	8000388 <__udivmoddi4+0xe4>
 8000560:	3802      	subs	r0, #2
 8000562:	443c      	add	r4, r7
 8000564:	e724      	b.n	80003b0 <__udivmoddi4+0x10c>
 8000566:	bf00      	nop

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	; 0x28
 8000570:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fa31 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f871 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f8d7 	bl	800072c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // Enable the CYCCNT counter
   DWT_CTRL |=(1<<0);
 800057e:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <main+0xc8>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a2c      	ldr	r2, [pc, #176]	; (8000634 <main+0xc8>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]
   SEGGER_SYSVIEW_Conf();
 800058a:	f003 ff0b 	bl	80043a4 <SEGGER_SYSVIEW_Conf>
   SEGGER_SYSVIEW_Start();
 800058e:	f004 fe33 	bl	80051f8 <SEGGER_SYSVIEW_Start>
   status = xTaskCreate(task1_handler, "Task1", 200, "Toggle LED from Task1", 2, &task1_handle);
 8000592:	f107 030c 	add.w	r3, r7, #12
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	2302      	movs	r3, #2
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	4b26      	ldr	r3, [pc, #152]	; (8000638 <main+0xcc>)
 800059e:	22c8      	movs	r2, #200	; 0xc8
 80005a0:	4926      	ldr	r1, [pc, #152]	; (800063c <main+0xd0>)
 80005a2:	4827      	ldr	r0, [pc, #156]	; (8000640 <main+0xd4>)
 80005a4:	f001 ffbe 	bl	8002524 <xTaskCreate>
 80005a8:	61f8      	str	r0, [r7, #28]
   configASSERT(status == pdPASS);
 80005aa:	69fb      	ldr	r3, [r7, #28]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d00a      	beq.n	80005c6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b4:	f383 8811 	msr	BASEPRI, r3
 80005b8:	f3bf 8f6f 	isb	sy
 80005bc:	f3bf 8f4f 	dsb	sy
 80005c0:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c2:	bf00      	nop
 80005c4:	e7fe      	b.n	80005c4 <main+0x58>

   status = xTaskCreate(task2_handler, "Task2", 200, "Toggle Buzzer from Task2", 2, &task2_handle);
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	2302      	movs	r3, #2
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <main+0xd8>)
 80005d2:	22c8      	movs	r2, #200	; 0xc8
 80005d4:	491c      	ldr	r1, [pc, #112]	; (8000648 <main+0xdc>)
 80005d6:	481d      	ldr	r0, [pc, #116]	; (800064c <main+0xe0>)
 80005d8:	f001 ffa4 	bl	8002524 <xTaskCreate>
 80005dc:	61f8      	str	r0, [r7, #28]
   configASSERT(status == pdPASS);
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d00a      	beq.n	80005fa <main+0x8e>
        __asm volatile
 80005e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e8:	f383 8811 	msr	BASEPRI, r3
 80005ec:	f3bf 8f6f 	isb	sy
 80005f0:	f3bf 8f4f 	dsb	sy
 80005f4:	617b      	str	r3, [r7, #20]
    }
 80005f6:	bf00      	nop
 80005f8:	e7fe      	b.n	80005f8 <main+0x8c>

   status = xTaskCreate(task3_handler, "Task3", 200, "Toggle LED from Task3", 2, &task3_handle);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2302      	movs	r3, #2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <main+0xe4>)
 8000604:	22c8      	movs	r2, #200	; 0xc8
 8000606:	4913      	ldr	r1, [pc, #76]	; (8000654 <main+0xe8>)
 8000608:	4813      	ldr	r0, [pc, #76]	; (8000658 <main+0xec>)
 800060a:	f001 ff8b 	bl	8002524 <xTaskCreate>
 800060e:	61f8      	str	r0, [r7, #28]
   configASSERT(status == pdPASS);
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d00a      	beq.n	800062c <main+0xc0>
        __asm volatile
 8000616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061a:	f383 8811 	msr	BASEPRI, r3
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	f3bf 8f4f 	dsb	sy
 8000626:	613b      	str	r3, [r7, #16]
    }
 8000628:	bf00      	nop
 800062a:	e7fe      	b.n	800062a <main+0xbe>
   //start scheduler
   vTaskStartScheduler();
 800062c:	f002 f914 	bl	8002858 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0xc4>
 8000632:	bf00      	nop
 8000634:	e0001000 	.word	0xe0001000
 8000638:	08005e38 	.word	0x08005e38
 800063c:	08005e50 	.word	0x08005e50
 8000640:	08000791 	.word	0x08000791
 8000644:	08005e58 	.word	0x08005e58
 8000648:	08005e74 	.word	0x08005e74
 800064c:	080007b1 	.word	0x080007b1
 8000650:	08005e7c 	.word	0x08005e7c
 8000654:	08005e94 	.word	0x08005e94
 8000658:	080007d1 	.word	0x080007d1

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f005 fbd0 	bl	8005e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b27      	ldr	r3, [pc, #156]	; (8000724 <SystemClock_Config+0xc8>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a26      	ldr	r2, [pc, #152]	; (8000724 <SystemClock_Config+0xc8>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <SystemClock_Config+0xc8>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <SystemClock_Config+0xcc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a20      	ldr	r2, [pc, #128]	; (8000728 <SystemClock_Config+0xcc>)
 80006a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <SystemClock_Config+0xcc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006d0:	2364      	movs	r3, #100	; 0x64
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fc79 	bl	8000fd8 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 f890 	bl	8000810 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2103      	movs	r1, #3
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fedb 	bl	80014c8 <HAL_RCC_ClockConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000718:	f000 f87a 	bl	8000810 <Error_Handler>
  }
}
 800071c:	bf00      	nop
 800071e:	3750      	adds	r7, #80	; 0x50
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_GPIO_Init+0x5c>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000748:	4a0f      	ldr	r2, [pc, #60]	; (8000788 <MX_GPIO_Init+0x5c>)
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	6313      	str	r3, [r2, #48]	; 0x30
 8000750:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <MX_GPIO_Init+0x5c>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2170      	movs	r1, #112	; 0x70
 8000760:	480a      	ldr	r0, [pc, #40]	; (800078c <MX_GPIO_Init+0x60>)
 8000762:	f000 fc05 	bl	8000f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000766:	2370      	movs	r3, #112	; 0x70
 8000768:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	4619      	mov	r1, r3
 800077a:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_GPIO_Init+0x60>)
 800077c:	f000 fa74 	bl	8000c68 <HAL_GPIO_Init>

}
 8000780:	bf00      	nop
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000

08000790 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void *parameters){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000798:	2110      	movs	r1, #16
 800079a:	4804      	ldr	r0, [pc, #16]	; (80007ac <task1_handler+0x1c>)
 800079c:	f000 fc01 	bl	8000fa2 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80007a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007a4:	f000 f95a 	bl	8000a5c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80007a8:	e7f6      	b.n	8000798 <task1_handler+0x8>
 80007aa:	bf00      	nop
 80007ac:	40020000 	.word	0x40020000

080007b0 <task2_handler>:
	}
}
static void task2_handler(void *parameters){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007b8:	2120      	movs	r1, #32
 80007ba:	4804      	ldr	r0, [pc, #16]	; (80007cc <task2_handler+0x1c>)
 80007bc:	f000 fbf1 	bl	8000fa2 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 80007c0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80007c4:	f000 f94a 	bl	8000a5c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80007c8:	e7f6      	b.n	80007b8 <task2_handler+0x8>
 80007ca:	bf00      	nop
 80007cc:	40020000 	.word	0x40020000

080007d0 <task3_handler>:
	}
}
static void task3_handler(void *parameters){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80007d8:	2140      	movs	r1, #64	; 0x40
 80007da:	4803      	ldr	r0, [pc, #12]	; (80007e8 <task3_handler+0x18>)
 80007dc:	f000 fbe1 	bl	8000fa2 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 80007e0:	20c8      	movs	r0, #200	; 0xc8
 80007e2:	f000 f93b 	bl	8000a5c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80007e6:	e7f7      	b.n	80007d8 <task3_handler+0x8>
 80007e8:	40020000 	.word	0x40020000

080007ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d101      	bne.n	8000802 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007fe:	f000 f90d 	bl	8000a1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40000c00 	.word	0x40000c00

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <HAL_MspInit+0x4c>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000830:	6453      	str	r3, [r2, #68]	; 0x44
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x4c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800085a:	f003 f9ed 	bl	8003c38 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 800087c:	2200      	movs	r2, #0
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	2032      	movs	r0, #50	; 0x32
 8000882:	f000 f9c7 	bl	8000c14 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000886:	2032      	movs	r0, #50	; 0x32
 8000888:	f000 f9e0 	bl	8000c4c <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <HAL_InitTick+0xa4>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	4a1e      	ldr	r2, [pc, #120]	; (8000910 <HAL_InitTick+0xa4>)
 8000896:	f043 0308 	orr.w	r3, r3, #8
 800089a:	6413      	str	r3, [r2, #64]	; 0x40
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <HAL_InitTick+0xa4>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	f003 0308 	and.w	r3, r3, #8
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008a8:	f107 0210 	add.w	r2, r7, #16
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4611      	mov	r1, r2
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 ffc4 	bl	8001840 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80008b8:	f000 ffae 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 80008bc:	4603      	mov	r3, r0
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <HAL_InitTick+0xa8>)
 80008c6:	fba2 2303 	umull	r2, r3, r2, r3
 80008ca:	0c9b      	lsrs	r3, r3, #18
 80008cc:	3b01      	subs	r3, #1
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_InitTick+0xac>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <HAL_InitTick+0xb0>)
 80008d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_InitTick+0xac>)
 80008d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008dc:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <HAL_InitTick+0xac>)
 80008e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008e2:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_InitTick+0xac>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_InitTick+0xac>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <HAL_InitTick+0xac>)
 80008f2:	f000 ffd7 	bl	80018a4 <HAL_TIM_Base_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d104      	bne.n	8000906 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80008fc:	4806      	ldr	r0, [pc, #24]	; (8000918 <HAL_InitTick+0xac>)
 80008fe:	f001 f82b 	bl	8001958 <HAL_TIM_Base_Start_IT>
 8000902:	4603      	mov	r3, r0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3730      	adds	r7, #48	; 0x30
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	431bde83 	.word	0x431bde83
 8000918:	20014368 	.word	0x20014368
 800091c:	40000c00 	.word	0x40000c00

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <MemManage_Handler+0x4>

08000932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <UsageFault_Handler+0x4>

0800093e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <TIM5_IRQHandler+0x10>)
 8000952:	f001 f863 	bl	8001a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20014368 	.word	0x20014368

08000960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800098a:	490e      	ldr	r1, [pc, #56]	; (80009c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800098c:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009a0:	4c0b      	ldr	r4, [pc, #44]	; (80009d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009ae:	f7ff ffd7 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b2:	f005 f9ed 	bl	8005d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b6:	f7ff fdd9 	bl	800056c <main>
  bx  lr    
 80009ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80009c8:	08005fb4 	.word	0x08005fb4
  ldr r2, =_sbss
 80009cc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80009d0:	2001449c 	.word	0x2001449c

080009d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <HAL_Init+0x40>)
 80009e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_Init+0x40>)
 80009ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_Init+0x40>)
 80009fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f8fc 	bl	8000bfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff ff30 	bl	800086c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a0c:	f7ff ff06 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023c00 	.word	0x40023c00

08000a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_IncTick+0x20>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_IncTick+0x24>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <HAL_IncTick+0x24>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	200143b0 	.word	0x200143b0

08000a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_GetTick+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	200143b0 	.word	0x200143b0

08000a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a64:	f7ff ffee 	bl	8000a44 <HAL_GetTick>
 8000a68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a74:	d005      	beq.n	8000a82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_Delay+0x44>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4413      	add	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a82:	bf00      	nop
 8000a84:	f7ff ffde 	bl	8000a44 <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d8f7      	bhi.n	8000a84 <HAL_Delay+0x28>
  {
  }
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000008 	.word	0x20000008

08000aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	60d3      	str	r3, [r2, #12]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <__NVIC_GetPriorityGrouping+0x18>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	0a1b      	lsrs	r3, r3, #8
 8000af6:	f003 0307 	and.w	r3, r3, #7
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	db0b      	blt.n	8000b32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	f003 021f 	and.w	r2, r3, #31
 8000b20:	4907      	ldr	r1, [pc, #28]	; (8000b40 <__NVIC_EnableIRQ+0x38>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	095b      	lsrs	r3, r3, #5
 8000b28:	2001      	movs	r0, #1
 8000b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	db0a      	blt.n	8000b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	490c      	ldr	r1, [pc, #48]	; (8000b90 <__NVIC_SetPriority+0x4c>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	0112      	lsls	r2, r2, #4
 8000b64:	b2d2      	uxtb	r2, r2
 8000b66:	440b      	add	r3, r1
 8000b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b6c:	e00a      	b.n	8000b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	4908      	ldr	r1, [pc, #32]	; (8000b94 <__NVIC_SetPriority+0x50>)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	f003 030f 	and.w	r3, r3, #15
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	0112      	lsls	r2, r2, #4
 8000b7e:	b2d2      	uxtb	r2, r2
 8000b80:	440b      	add	r3, r1
 8000b82:	761a      	strb	r2, [r3, #24]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000e100 	.word	0xe000e100
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bac:	69fb      	ldr	r3, [r7, #28]
 8000bae:	f1c3 0307 	rsb	r3, r3, #7
 8000bb2:	2b04      	cmp	r3, #4
 8000bb4:	bf28      	it	cs
 8000bb6:	2304      	movcs	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	2b06      	cmp	r3, #6
 8000bc0:	d902      	bls.n	8000bc8 <NVIC_EncodePriority+0x30>
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	3b03      	subs	r3, #3
 8000bc6:	e000      	b.n	8000bca <NVIC_EncodePriority+0x32>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	401a      	ands	r2, r3
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000be0:	f04f 31ff 	mov.w	r1, #4294967295
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bea:	43d9      	mvns	r1, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf0:	4313      	orrs	r3, r2
         );
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3724      	adds	r7, #36	; 0x24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff ff4c 	bl	8000aa4 <__NVIC_SetPriorityGrouping>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c26:	f7ff ff61 	bl	8000aec <__NVIC_GetPriorityGrouping>
 8000c2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	6978      	ldr	r0, [r7, #20]
 8000c32:	f7ff ffb1 	bl	8000b98 <NVIC_EncodePriority>
 8000c36:	4602      	mov	r2, r0
 8000c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff ff80 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c44:	bf00      	nop
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff54 	bl	8000b08 <__NVIC_EnableIRQ>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
 8000c82:	e159      	b.n	8000f38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c84:	2201      	movs	r2, #1
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	4013      	ands	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	f040 8148 	bne.w	8000f32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d005      	beq.n	8000cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d130      	bne.n	8000d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	091b      	lsrs	r3, r3, #4
 8000d06:	f003 0201 	and.w	r2, r3, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	d017      	beq.n	8000d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	2203      	movs	r2, #3
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	69ba      	ldr	r2, [r7, #24]
 8000d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d123      	bne.n	8000dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	08da      	lsrs	r2, r3, #3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	3208      	adds	r2, #8
 8000d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	691a      	ldr	r2, [r3, #16]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	08da      	lsrs	r2, r3, #3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3208      	adds	r2, #8
 8000da6:	69b9      	ldr	r1, [r7, #24]
 8000da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0203 	and.w	r2, r3, #3
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 80a2 	beq.w	8000f32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	4b57      	ldr	r3, [pc, #348]	; (8000f50 <HAL_GPIO_Init+0x2e8>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	4a56      	ldr	r2, [pc, #344]	; (8000f50 <HAL_GPIO_Init+0x2e8>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfe:	4b54      	ldr	r3, [pc, #336]	; (8000f50 <HAL_GPIO_Init+0x2e8>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e0a:	4a52      	ldr	r2, [pc, #328]	; (8000f54 <HAL_GPIO_Init+0x2ec>)
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	3302      	adds	r3, #2
 8000e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	220f      	movs	r2, #15
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a49      	ldr	r2, [pc, #292]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d019      	beq.n	8000e6a <HAL_GPIO_Init+0x202>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a48      	ldr	r2, [pc, #288]	; (8000f5c <HAL_GPIO_Init+0x2f4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d013      	beq.n	8000e66 <HAL_GPIO_Init+0x1fe>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a47      	ldr	r2, [pc, #284]	; (8000f60 <HAL_GPIO_Init+0x2f8>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d00d      	beq.n	8000e62 <HAL_GPIO_Init+0x1fa>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a46      	ldr	r2, [pc, #280]	; (8000f64 <HAL_GPIO_Init+0x2fc>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d007      	beq.n	8000e5e <HAL_GPIO_Init+0x1f6>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a45      	ldr	r2, [pc, #276]	; (8000f68 <HAL_GPIO_Init+0x300>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d101      	bne.n	8000e5a <HAL_GPIO_Init+0x1f2>
 8000e56:	2304      	movs	r3, #4
 8000e58:	e008      	b.n	8000e6c <HAL_GPIO_Init+0x204>
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x204>
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e004      	b.n	8000e6c <HAL_GPIO_Init+0x204>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e002      	b.n	8000e6c <HAL_GPIO_Init+0x204>
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <HAL_GPIO_Init+0x204>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	69fa      	ldr	r2, [r7, #28]
 8000e6e:	f002 0203 	and.w	r2, r2, #3
 8000e72:	0092      	lsls	r2, r2, #2
 8000e74:	4093      	lsls	r3, r2
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e7c:	4935      	ldr	r1, [pc, #212]	; (8000f54 <HAL_GPIO_Init+0x2ec>)
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	3302      	adds	r3, #2
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e8a:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <HAL_GPIO_Init+0x304>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000eae:	4a2f      	ldr	r2, [pc, #188]	; (8000f6c <HAL_GPIO_Init+0x304>)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	; (8000f6c <HAL_GPIO_Init+0x304>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ed8:	4a24      	ldr	r2, [pc, #144]	; (8000f6c <HAL_GPIO_Init+0x304>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ede:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <HAL_GPIO_Init+0x304>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f02:	4a1a      	ldr	r2, [pc, #104]	; (8000f6c <HAL_GPIO_Init+0x304>)
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_GPIO_Init+0x304>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f2c:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <HAL_GPIO_Init+0x304>)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3301      	adds	r3, #1
 8000f36:	61fb      	str	r3, [r7, #28]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	2b0f      	cmp	r3, #15
 8000f3c:	f67f aea2 	bls.w	8000c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40013800 	.word	0x40013800
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	40020800 	.word	0x40020800
 8000f64:	40020c00 	.word	0x40020c00
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40013c00 	.word	0x40013c00

08000f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	807b      	strh	r3, [r7, #2]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f80:	787b      	ldrb	r3, [r7, #1]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f86:	887a      	ldrh	r2, [r7, #2]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f8c:	e003      	b.n	8000f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	041a      	lsls	r2, r3, #16
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	619a      	str	r2, [r3, #24]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b085      	sub	sp, #20
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	460b      	mov	r3, r1
 8000fac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fb4:	887a      	ldrh	r2, [r7, #2]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	041a      	lsls	r2, r3, #16
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	887b      	ldrh	r3, [r7, #2]
 8000fc2:	400b      	ands	r3, r1
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	619a      	str	r2, [r3, #24]
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e264      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d075      	beq.n	80010e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ff6:	4ba3      	ldr	r3, [pc, #652]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 030c 	and.w	r3, r3, #12
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	d00c      	beq.n	800101c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001002:	4ba0      	ldr	r3, [pc, #640]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800100a:	2b08      	cmp	r3, #8
 800100c:	d112      	bne.n	8001034 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800100e:	4b9d      	ldr	r3, [pc, #628]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800101a:	d10b      	bne.n	8001034 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101c:	4b99      	ldr	r3, [pc, #612]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d05b      	beq.n	80010e0 <HAL_RCC_OscConfig+0x108>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d157      	bne.n	80010e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e23f      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800103c:	d106      	bne.n	800104c <HAL_RCC_OscConfig+0x74>
 800103e:	4b91      	ldr	r3, [pc, #580]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a90      	ldr	r2, [pc, #576]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e01d      	b.n	8001088 <HAL_RCC_OscConfig+0xb0>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001054:	d10c      	bne.n	8001070 <HAL_RCC_OscConfig+0x98>
 8001056:	4b8b      	ldr	r3, [pc, #556]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a8a      	ldr	r2, [pc, #552]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 800105c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	4b88      	ldr	r3, [pc, #544]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a87      	ldr	r2, [pc, #540]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e00b      	b.n	8001088 <HAL_RCC_OscConfig+0xb0>
 8001070:	4b84      	ldr	r3, [pc, #528]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a83      	ldr	r2, [pc, #524]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b81      	ldr	r3, [pc, #516]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a80      	ldr	r2, [pc, #512]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d013      	beq.n	80010b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff fcd8 	bl	8000a44 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001098:	f7ff fcd4 	bl	8000a44 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b64      	cmp	r3, #100	; 0x64
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e204      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	4b76      	ldr	r3, [pc, #472]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f0      	beq.n	8001098 <HAL_RCC_OscConfig+0xc0>
 80010b6:	e014      	b.n	80010e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b8:	f7ff fcc4 	bl	8000a44 <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c0:	f7ff fcc0 	bl	8000a44 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b64      	cmp	r3, #100	; 0x64
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e1f0      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d2:	4b6c      	ldr	r3, [pc, #432]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f0      	bne.n	80010c0 <HAL_RCC_OscConfig+0xe8>
 80010de:	e000      	b.n	80010e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d063      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ee:	4b65      	ldr	r3, [pc, #404]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00b      	beq.n	8001112 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010fa:	4b62      	ldr	r3, [pc, #392]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001102:	2b08      	cmp	r3, #8
 8001104:	d11c      	bne.n	8001140 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001106:	4b5f      	ldr	r3, [pc, #380]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d116      	bne.n	8001140 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001112:	4b5c      	ldr	r3, [pc, #368]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d005      	beq.n	800112a <HAL_RCC_OscConfig+0x152>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d001      	beq.n	800112a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e1c4      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112a:	4b56      	ldr	r3, [pc, #344]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4952      	ldr	r1, [pc, #328]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 800113a:	4313      	orrs	r3, r2
 800113c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800113e:	e03a      	b.n	80011b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d020      	beq.n	800118a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001148:	4b4f      	ldr	r3, [pc, #316]	; (8001288 <HAL_RCC_OscConfig+0x2b0>)
 800114a:	2201      	movs	r2, #1
 800114c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114e:	f7ff fc79 	bl	8000a44 <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001154:	e008      	b.n	8001168 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001156:	f7ff fc75 	bl	8000a44 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d901      	bls.n	8001168 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e1a5      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001168:	4b46      	ldr	r3, [pc, #280]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 0302 	and.w	r3, r3, #2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f0      	beq.n	8001156 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001174:	4b43      	ldr	r3, [pc, #268]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4940      	ldr	r1, [pc, #256]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001184:	4313      	orrs	r3, r2
 8001186:	600b      	str	r3, [r1, #0]
 8001188:	e015      	b.n	80011b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800118a:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <HAL_RCC_OscConfig+0x2b0>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001190:	f7ff fc58 	bl	8000a44 <HAL_GetTick>
 8001194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001198:	f7ff fc54 	bl	8000a44 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e184      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011aa:	4b36      	ldr	r3, [pc, #216]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f0      	bne.n	8001198 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d030      	beq.n	8001224 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d016      	beq.n	80011f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ca:	4b30      	ldr	r3, [pc, #192]	; (800128c <HAL_RCC_OscConfig+0x2b4>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011d0:	f7ff fc38 	bl	8000a44 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d8:	f7ff fc34 	bl	8000a44 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e164      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0x200>
 80011f6:	e015      	b.n	8001224 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011f8:	4b24      	ldr	r3, [pc, #144]	; (800128c <HAL_RCC_OscConfig+0x2b4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fe:	f7ff fc21 	bl	8000a44 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001206:	f7ff fc1d 	bl	8000a44 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e14d      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001218:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 800121a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1f0      	bne.n	8001206 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	f000 80a0 	beq.w	8001372 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10f      	bne.n	8001262 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <HAL_RCC_OscConfig+0x2ac>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800125e:	2301      	movs	r3, #1
 8001260:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126a:	2b00      	cmp	r3, #0
 800126c:	d121      	bne.n	80012b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a07      	ldr	r2, [pc, #28]	; (8001290 <HAL_RCC_OscConfig+0x2b8>)
 8001274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800127a:	f7ff fbe3 	bl	8000a44 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001280:	e011      	b.n	80012a6 <HAL_RCC_OscConfig+0x2ce>
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	42470000 	.word	0x42470000
 800128c:	42470e80 	.word	0x42470e80
 8001290:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001294:	f7ff fbd6 	bl	8000a44 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e106      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a6:	4b85      	ldr	r3, [pc, #532]	; (80014bc <HAL_RCC_OscConfig+0x4e4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d106      	bne.n	80012c8 <HAL_RCC_OscConfig+0x2f0>
 80012ba:	4b81      	ldr	r3, [pc, #516]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 80012bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012be:	4a80      	ldr	r2, [pc, #512]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6713      	str	r3, [r2, #112]	; 0x70
 80012c6:	e01c      	b.n	8001302 <HAL_RCC_OscConfig+0x32a>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2b05      	cmp	r3, #5
 80012ce:	d10c      	bne.n	80012ea <HAL_RCC_OscConfig+0x312>
 80012d0:	4b7b      	ldr	r3, [pc, #492]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 80012d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d4:	4a7a      	ldr	r2, [pc, #488]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	6713      	str	r3, [r2, #112]	; 0x70
 80012dc:	4b78      	ldr	r3, [pc, #480]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 80012de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e0:	4a77      	ldr	r2, [pc, #476]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6713      	str	r3, [r2, #112]	; 0x70
 80012e8:	e00b      	b.n	8001302 <HAL_RCC_OscConfig+0x32a>
 80012ea:	4b75      	ldr	r3, [pc, #468]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 80012ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ee:	4a74      	ldr	r2, [pc, #464]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 80012f0:	f023 0301 	bic.w	r3, r3, #1
 80012f4:	6713      	str	r3, [r2, #112]	; 0x70
 80012f6:	4b72      	ldr	r3, [pc, #456]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 80012f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fa:	4a71      	ldr	r2, [pc, #452]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 80012fc:	f023 0304 	bic.w	r3, r3, #4
 8001300:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d015      	beq.n	8001336 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130a:	f7ff fb9b 	bl	8000a44 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001310:	e00a      	b.n	8001328 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001312:	f7ff fb97 	bl	8000a44 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001320:	4293      	cmp	r3, r2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e0c5      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001328:	4b65      	ldr	r3, [pc, #404]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 800132a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0ee      	beq.n	8001312 <HAL_RCC_OscConfig+0x33a>
 8001334:	e014      	b.n	8001360 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001336:	f7ff fb85 	bl	8000a44 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800133c:	e00a      	b.n	8001354 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800133e:	f7ff fb81 	bl	8000a44 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	f241 3288 	movw	r2, #5000	; 0x1388
 800134c:	4293      	cmp	r3, r2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e0af      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001354:	4b5a      	ldr	r3, [pc, #360]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 8001356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1ee      	bne.n	800133e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001360:	7dfb      	ldrb	r3, [r7, #23]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d105      	bne.n	8001372 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001366:	4b56      	ldr	r3, [pc, #344]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a55      	ldr	r2, [pc, #340]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 800136c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 809b 	beq.w	80014b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800137c:	4b50      	ldr	r3, [pc, #320]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b08      	cmp	r3, #8
 8001386:	d05c      	beq.n	8001442 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d141      	bne.n	8001414 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001390:	4b4c      	ldr	r3, [pc, #304]	; (80014c4 <HAL_RCC_OscConfig+0x4ec>)
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff fb55 	bl	8000a44 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800139e:	f7ff fb51 	bl	8000a44 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e081      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b0:	4b43      	ldr	r3, [pc, #268]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69da      	ldr	r2, [r3, #28]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	019b      	lsls	r3, r3, #6
 80013cc:	431a      	orrs	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d2:	085b      	lsrs	r3, r3, #1
 80013d4:	3b01      	subs	r3, #1
 80013d6:	041b      	lsls	r3, r3, #16
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013de:	061b      	lsls	r3, r3, #24
 80013e0:	4937      	ldr	r1, [pc, #220]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013e6:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <HAL_RCC_OscConfig+0x4ec>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ec:	f7ff fb2a 	bl	8000a44 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f4:	f7ff fb26 	bl	8000a44 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e056      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001406:	4b2e      	ldr	r3, [pc, #184]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x41c>
 8001412:	e04e      	b.n	80014b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <HAL_RCC_OscConfig+0x4ec>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fb13 	bl	8000a44 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001422:	f7ff fb0f 	bl	8000a44 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e03f      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x44a>
 8001440:	e037      	b.n	80014b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e032      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <HAL_RCC_OscConfig+0x4e8>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d028      	beq.n	80014ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001466:	429a      	cmp	r2, r3
 8001468:	d121      	bne.n	80014ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001474:	429a      	cmp	r2, r3
 8001476:	d11a      	bne.n	80014ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800147e:	4013      	ands	r3, r2
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001484:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001486:	4293      	cmp	r3, r2
 8001488:	d111      	bne.n	80014ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	3b01      	subs	r3, #1
 8001498:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800149a:	429a      	cmp	r2, r3
 800149c:	d107      	bne.n	80014ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d001      	beq.n	80014b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40007000 	.word	0x40007000
 80014c0:	40023800 	.word	0x40023800
 80014c4:	42470060 	.word	0x42470060

080014c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e0cc      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014dc:	4b68      	ldr	r3, [pc, #416]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d90c      	bls.n	8001504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ea:	4b65      	ldr	r3, [pc, #404]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f2:	4b63      	ldr	r3, [pc, #396]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d001      	beq.n	8001504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0b8      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d020      	beq.n	8001552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d005      	beq.n	8001528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800151c:	4b59      	ldr	r3, [pc, #356]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	4a58      	ldr	r2, [pc, #352]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001534:	4b53      	ldr	r3, [pc, #332]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4a52      	ldr	r2, [pc, #328]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800153e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001540:	4b50      	ldr	r3, [pc, #320]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	494d      	ldr	r1, [pc, #308]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d044      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d107      	bne.n	8001576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b47      	ldr	r3, [pc, #284]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d119      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e07f      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d003      	beq.n	8001586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001582:	2b03      	cmp	r3, #3
 8001584:	d107      	bne.n	8001596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001586:	4b3f      	ldr	r3, [pc, #252]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d109      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e06f      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001596:	4b3b      	ldr	r3, [pc, #236]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e067      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015a6:	4b37      	ldr	r3, [pc, #220]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f023 0203 	bic.w	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4934      	ldr	r1, [pc, #208]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015b8:	f7ff fa44 	bl	8000a44 <HAL_GetTick>
 80015bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c0:	f7ff fa40 	bl	8000a44 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e04f      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d6:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 020c 	and.w	r2, r3, #12
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d1eb      	bne.n	80015c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015e8:	4b25      	ldr	r3, [pc, #148]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0307 	and.w	r3, r3, #7
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d20c      	bcs.n	8001610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015f6:	4b22      	ldr	r3, [pc, #136]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <HAL_RCC_ClockConfig+0x1b8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e032      	b.n	8001676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	4916      	ldr	r1, [pc, #88]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	2b00      	cmp	r3, #0
 8001638:	d009      	beq.n	800164e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	490e      	ldr	r1, [pc, #56]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	4313      	orrs	r3, r2
 800164c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800164e:	f000 f821 	bl	8001694 <HAL_RCC_GetSysClockFreq>
 8001652:	4602      	mov	r2, r0
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	490a      	ldr	r1, [pc, #40]	; (8001688 <HAL_RCC_ClockConfig+0x1c0>)
 8001660:	5ccb      	ldrb	r3, [r1, r3]
 8001662:	fa22 f303 	lsr.w	r3, r2, r3
 8001666:	4a09      	ldr	r2, [pc, #36]	; (800168c <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_RCC_ClockConfig+0x1c8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff f8fc 	bl	800086c <HAL_InitTick>

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023c00 	.word	0x40023c00
 8001684:	40023800 	.word	0x40023800
 8001688:	08005f78 	.word	0x08005f78
 800168c:	20000000 	.word	0x20000000
 8001690:	20000004 	.word	0x20000004

08001694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001694:	b5b0      	push	{r4, r5, r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800169a:	2100      	movs	r1, #0
 800169c:	6079      	str	r1, [r7, #4]
 800169e:	2100      	movs	r1, #0
 80016a0:	60f9      	str	r1, [r7, #12]
 80016a2:	2100      	movs	r1, #0
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016a6:	2100      	movs	r1, #0
 80016a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016aa:	4952      	ldr	r1, [pc, #328]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80016ac:	6889      	ldr	r1, [r1, #8]
 80016ae:	f001 010c 	and.w	r1, r1, #12
 80016b2:	2908      	cmp	r1, #8
 80016b4:	d00d      	beq.n	80016d2 <HAL_RCC_GetSysClockFreq+0x3e>
 80016b6:	2908      	cmp	r1, #8
 80016b8:	f200 8094 	bhi.w	80017e4 <HAL_RCC_GetSysClockFreq+0x150>
 80016bc:	2900      	cmp	r1, #0
 80016be:	d002      	beq.n	80016c6 <HAL_RCC_GetSysClockFreq+0x32>
 80016c0:	2904      	cmp	r1, #4
 80016c2:	d003      	beq.n	80016cc <HAL_RCC_GetSysClockFreq+0x38>
 80016c4:	e08e      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016c6:	4b4c      	ldr	r3, [pc, #304]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80016c8:	60bb      	str	r3, [r7, #8]
       break;
 80016ca:	e08e      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016cc:	4b4b      	ldr	r3, [pc, #300]	; (80017fc <HAL_RCC_GetSysClockFreq+0x168>)
 80016ce:	60bb      	str	r3, [r7, #8]
      break;
 80016d0:	e08b      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d2:	4948      	ldr	r1, [pc, #288]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80016d4:	6849      	ldr	r1, [r1, #4]
 80016d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80016da:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016dc:	4945      	ldr	r1, [pc, #276]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80016de:	6849      	ldr	r1, [r1, #4]
 80016e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80016e4:	2900      	cmp	r1, #0
 80016e6:	d024      	beq.n	8001732 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e8:	4942      	ldr	r1, [pc, #264]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80016ea:	6849      	ldr	r1, [r1, #4]
 80016ec:	0989      	lsrs	r1, r1, #6
 80016ee:	4608      	mov	r0, r1
 80016f0:	f04f 0100 	mov.w	r1, #0
 80016f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80016f8:	f04f 0500 	mov.w	r5, #0
 80016fc:	ea00 0204 	and.w	r2, r0, r4
 8001700:	ea01 0305 	and.w	r3, r1, r5
 8001704:	493d      	ldr	r1, [pc, #244]	; (80017fc <HAL_RCC_GetSysClockFreq+0x168>)
 8001706:	fb01 f003 	mul.w	r0, r1, r3
 800170a:	2100      	movs	r1, #0
 800170c:	fb01 f102 	mul.w	r1, r1, r2
 8001710:	1844      	adds	r4, r0, r1
 8001712:	493a      	ldr	r1, [pc, #232]	; (80017fc <HAL_RCC_GetSysClockFreq+0x168>)
 8001714:	fba2 0101 	umull	r0, r1, r2, r1
 8001718:	1863      	adds	r3, r4, r1
 800171a:	4619      	mov	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	461a      	mov	r2, r3
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	f7fe fda6 	bl	8000274 <__aeabi_uldivmod>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4613      	mov	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	e04a      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001732:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	099b      	lsrs	r3, r3, #6
 8001738:	461a      	mov	r2, r3
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001742:	f04f 0100 	mov.w	r1, #0
 8001746:	ea02 0400 	and.w	r4, r2, r0
 800174a:	ea03 0501 	and.w	r5, r3, r1
 800174e:	4620      	mov	r0, r4
 8001750:	4629      	mov	r1, r5
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	014b      	lsls	r3, r1, #5
 800175c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001760:	0142      	lsls	r2, r0, #5
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	1b00      	subs	r0, r0, r4
 8001768:	eb61 0105 	sbc.w	r1, r1, r5
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	018b      	lsls	r3, r1, #6
 8001776:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800177a:	0182      	lsls	r2, r0, #6
 800177c:	1a12      	subs	r2, r2, r0
 800177e:	eb63 0301 	sbc.w	r3, r3, r1
 8001782:	f04f 0000 	mov.w	r0, #0
 8001786:	f04f 0100 	mov.w	r1, #0
 800178a:	00d9      	lsls	r1, r3, #3
 800178c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001790:	00d0      	lsls	r0, r2, #3
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	1912      	adds	r2, r2, r4
 8001798:	eb45 0303 	adc.w	r3, r5, r3
 800179c:	f04f 0000 	mov.w	r0, #0
 80017a0:	f04f 0100 	mov.w	r1, #0
 80017a4:	0299      	lsls	r1, r3, #10
 80017a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017aa:	0290      	lsls	r0, r2, #10
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	461a      	mov	r2, r3
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	f7fe fd5a 	bl	8000274 <__aeabi_uldivmod>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4613      	mov	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	0c1b      	lsrs	r3, r3, #16
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	3301      	adds	r3, #1
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	60bb      	str	r3, [r7, #8]
      break;
 80017e2:	e002      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80017e6:	60bb      	str	r3, [r7, #8]
      break;
 80017e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ea:	68bb      	ldr	r3, [r7, #8]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bdb0      	pop	{r4, r5, r7, pc}
 80017f4:	40023800 	.word	0x40023800
 80017f8:	00f42400 	.word	0x00f42400
 80017fc:	017d7840 	.word	0x017d7840

08001800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_RCC_GetHCLKFreq+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000000 	.word	0x20000000

08001818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800181c:	f7ff fff0 	bl	8001800 <HAL_RCC_GetHCLKFreq>
 8001820:	4602      	mov	r2, r0
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	0a9b      	lsrs	r3, r3, #10
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	4903      	ldr	r1, [pc, #12]	; (800183c <HAL_RCC_GetPCLK1Freq+0x24>)
 800182e:	5ccb      	ldrb	r3, [r1, r3]
 8001830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001834:	4618      	mov	r0, r3
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800
 800183c:	08005f88 	.word	0x08005f88

08001840 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	220f      	movs	r2, #15
 800184e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_RCC_GetClockConfig+0x5c>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 0203 	and.w	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_RCC_GetClockConfig+0x5c>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_RCC_GetClockConfig+0x5c>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_RCC_GetClockConfig+0x5c>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	08db      	lsrs	r3, r3, #3
 800187a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001882:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <HAL_RCC_GetClockConfig+0x60>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0207 	and.w	r2, r3, #7
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	601a      	str	r2, [r3, #0]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40023c00 	.word	0x40023c00

080018a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e041      	b.n	800193a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d106      	bne.n	80018d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f839 	bl	8001942 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2202      	movs	r2, #2
 80018d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3304      	adds	r3, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	4610      	mov	r0, r2
 80018e4:	f000 f9ca 	bl	8001c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b01      	cmp	r3, #1
 800196a:	d001      	beq.n	8001970 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e044      	b.n	80019fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2202      	movs	r2, #2
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0201 	orr.w	r2, r2, #1
 8001986:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <HAL_TIM_Base_Start_IT+0xb0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d018      	beq.n	80019c4 <HAL_TIM_Base_Start_IT+0x6c>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199a:	d013      	beq.n	80019c4 <HAL_TIM_Base_Start_IT+0x6c>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1a      	ldr	r2, [pc, #104]	; (8001a0c <HAL_TIM_Base_Start_IT+0xb4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d00e      	beq.n	80019c4 <HAL_TIM_Base_Start_IT+0x6c>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a19      	ldr	r2, [pc, #100]	; (8001a10 <HAL_TIM_Base_Start_IT+0xb8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d009      	beq.n	80019c4 <HAL_TIM_Base_Start_IT+0x6c>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <HAL_TIM_Base_Start_IT+0xbc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d004      	beq.n	80019c4 <HAL_TIM_Base_Start_IT+0x6c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a16      	ldr	r2, [pc, #88]	; (8001a18 <HAL_TIM_Base_Start_IT+0xc0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d111      	bne.n	80019e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d010      	beq.n	80019f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0201 	orr.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019e6:	e007      	b.n	80019f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40010000 	.word	0x40010000
 8001a0c:	40000400 	.word	0x40000400
 8001a10:	40000800 	.word	0x40000800
 8001a14:	40000c00 	.word	0x40000c00
 8001a18:	40014000 	.word	0x40014000

08001a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d122      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d11b      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f06f 0202 	mvn.w	r2, #2
 8001a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f8ee 	bl	8001c40 <HAL_TIM_IC_CaptureCallback>
 8001a64:	e005      	b.n	8001a72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 f8e0 	bl	8001c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f000 f8f1 	bl	8001c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d122      	bne.n	8001acc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d11b      	bne.n	8001acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f06f 0204 	mvn.w	r2, #4
 8001a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f8c4 	bl	8001c40 <HAL_TIM_IC_CaptureCallback>
 8001ab8:	e005      	b.n	8001ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f8b6 	bl	8001c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f8c7 	bl	8001c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d122      	bne.n	8001b20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b08      	cmp	r3, #8
 8001ae6:	d11b      	bne.n	8001b20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0208 	mvn.w	r2, #8
 8001af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2204      	movs	r2, #4
 8001af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f89a 	bl	8001c40 <HAL_TIM_IC_CaptureCallback>
 8001b0c:	e005      	b.n	8001b1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f88c 	bl	8001c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f89d 	bl	8001c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d122      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2b10      	cmp	r3, #16
 8001b3a:	d11b      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0210 	mvn.w	r2, #16
 8001b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2208      	movs	r2, #8
 8001b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f870 	bl	8001c40 <HAL_TIM_IC_CaptureCallback>
 8001b60:	e005      	b.n	8001b6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f862 	bl	8001c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f873 	bl	8001c54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d10e      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d107      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0201 	mvn.w	r2, #1
 8001b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7fe fe26 	bl	80007ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001baa:	2b80      	cmp	r3, #128	; 0x80
 8001bac:	d10e      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb8:	2b80      	cmp	r3, #128	; 0x80
 8001bba:	d107      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f8e2 	bl	8001d90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bd6:	2b40      	cmp	r3, #64	; 0x40
 8001bd8:	d10e      	bne.n	8001bf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be4:	2b40      	cmp	r3, #64	; 0x40
 8001be6:	d107      	bne.n	8001bf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f838 	bl	8001c68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d10e      	bne.n	8001c24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	2b20      	cmp	r3, #32
 8001c12:	d107      	bne.n	8001c24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0220 	mvn.w	r2, #32
 8001c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f8ac 	bl	8001d7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a34      	ldr	r2, [pc, #208]	; (8001d60 <TIM_Base_SetConfig+0xe4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d00f      	beq.n	8001cb4 <TIM_Base_SetConfig+0x38>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c9a:	d00b      	beq.n	8001cb4 <TIM_Base_SetConfig+0x38>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a31      	ldr	r2, [pc, #196]	; (8001d64 <TIM_Base_SetConfig+0xe8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d007      	beq.n	8001cb4 <TIM_Base_SetConfig+0x38>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a30      	ldr	r2, [pc, #192]	; (8001d68 <TIM_Base_SetConfig+0xec>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d003      	beq.n	8001cb4 <TIM_Base_SetConfig+0x38>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a2f      	ldr	r2, [pc, #188]	; (8001d6c <TIM_Base_SetConfig+0xf0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d108      	bne.n	8001cc6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a25      	ldr	r2, [pc, #148]	; (8001d60 <TIM_Base_SetConfig+0xe4>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d01b      	beq.n	8001d06 <TIM_Base_SetConfig+0x8a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd4:	d017      	beq.n	8001d06 <TIM_Base_SetConfig+0x8a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a22      	ldr	r2, [pc, #136]	; (8001d64 <TIM_Base_SetConfig+0xe8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <TIM_Base_SetConfig+0x8a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a21      	ldr	r2, [pc, #132]	; (8001d68 <TIM_Base_SetConfig+0xec>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00f      	beq.n	8001d06 <TIM_Base_SetConfig+0x8a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a20      	ldr	r2, [pc, #128]	; (8001d6c <TIM_Base_SetConfig+0xf0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00b      	beq.n	8001d06 <TIM_Base_SetConfig+0x8a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <TIM_Base_SetConfig+0xf4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d007      	beq.n	8001d06 <TIM_Base_SetConfig+0x8a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a1e      	ldr	r2, [pc, #120]	; (8001d74 <TIM_Base_SetConfig+0xf8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d003      	beq.n	8001d06 <TIM_Base_SetConfig+0x8a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a1d      	ldr	r2, [pc, #116]	; (8001d78 <TIM_Base_SetConfig+0xfc>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d108      	bne.n	8001d18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a08      	ldr	r2, [pc, #32]	; (8001d60 <TIM_Base_SetConfig+0xe4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d103      	bne.n	8001d4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	615a      	str	r2, [r3, #20]
}
 8001d52:	bf00      	nop
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40010000 	.word	0x40010000
 8001d64:	40000400 	.word	0x40000400
 8001d68:	40000800 	.word	0x40000800
 8001d6c:	40000c00 	.word	0x40000c00
 8001d70:	40014000 	.word	0x40014000
 8001d74:	40014400 	.word	0x40014400
 8001d78:	40014800 	.word	0x40014800

08001d7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f103 0208 	add.w	r2, r3, #8
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f103 0208 	add.w	r2, r3, #8
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f103 0208 	add.w	r2, r3, #8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b085      	sub	sp, #20
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e14:	d103      	bne.n	8001e1e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e00c      	b.n	8001e38 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	3308      	adds	r3, #8
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	e002      	b.n	8001e2c <vListInsert+0x2e>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d2f6      	bcs.n	8001e26 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	601a      	str	r2, [r3, #0]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6892      	ldr	r2, [r2, #8]
 8001e86:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6852      	ldr	r2, [r2, #4]
 8001e90:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d103      	bne.n	8001ea4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	1e5a      	subs	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10a      	bne.n	8001ef2 <xQueueGenericReset+0x2e>
        __asm volatile
 8001edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee0:	f383 8811 	msr	BASEPRI, r3
 8001ee4:	f3bf 8f6f 	isb	sy
 8001ee8:	f3bf 8f4f 	dsb	sy
 8001eec:	60fb      	str	r3, [r7, #12]
    }
 8001eee:	bf00      	nop
 8001ef0:	e7fe      	b.n	8001ef0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d05d      	beq.n	8001fb4 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d059      	beq.n	8001fb4 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f08:	2100      	movs	r1, #0
 8001f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d000      	beq.n	8001f14 <xQueueGenericReset+0x50>
 8001f12:	2101      	movs	r1, #1
 8001f14:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d14c      	bne.n	8001fb4 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001f1a:	f001 ff0b 	bl	8003d34 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f26:	6939      	ldr	r1, [r7, #16]
 8001f28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	441a      	add	r2, r3
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	2200      	movs	r2, #0
 8001f38:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	6939      	ldr	r1, [r7, #16]
 8001f4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	441a      	add	r2, r3
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	22ff      	movs	r2, #255	; 0xff
 8001f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	22ff      	movs	r2, #255	; 0xff
 8001f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d114      	bne.n	8001f9a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d01a      	beq.n	8001fae <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	3310      	adds	r3, #16
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 ffed 	bl	8002f5c <xTaskRemoveFromEventList>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d012      	beq.n	8001fae <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001f88:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <xQueueGenericReset+0x11c>)
 8001f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	f3bf 8f4f 	dsb	sy
 8001f94:	f3bf 8f6f 	isb	sy
 8001f98:	e009      	b.n	8001fae <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	3310      	adds	r3, #16
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff00 	bl	8001da4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	3324      	adds	r3, #36	; 0x24
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fefb 	bl	8001da4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001fae:	f001 fef1 	bl	8003d94 <vPortExitCritical>
 8001fb2:	e001      	b.n	8001fb8 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10a      	bne.n	8001fd4 <xQueueGenericReset+0x110>
        __asm volatile
 8001fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc2:	f383 8811 	msr	BASEPRI, r3
 8001fc6:	f3bf 8f6f 	isb	sy
 8001fca:	f3bf 8f4f 	dsb	sy
 8001fce:	60bb      	str	r3, [r7, #8]
    }
 8001fd0:	bf00      	nop
 8001fd2:	e7fe      	b.n	8001fd2 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001fd4:	697b      	ldr	r3, [r7, #20]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	e000ed04 	.word	0xe000ed04

08001fe4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d02e      	beq.n	800205a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	fba3 2302 	umull	r2, r3, r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d000      	beq.n	800200c <xQueueGenericCreate+0x28>
 800200a:	2101      	movs	r1, #1
 800200c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800200e:	2b00      	cmp	r3, #0
 8002010:	d123      	bne.n	800205a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	68ba      	ldr	r2, [r7, #8]
 8002016:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800201a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800201e:	d81c      	bhi.n	800205a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	3350      	adds	r3, #80	; 0x50
 800202e:	4618      	mov	r0, r3
 8002030:	f001 ffac 	bl	8003f8c <pvPortMalloc>
 8002034:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01c      	beq.n	8002076 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3350      	adds	r3, #80	; 0x50
 8002044:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002046:	79fa      	ldrb	r2, [r7, #7]
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f814 	bl	8002080 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002058:	e00d      	b.n	8002076 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10a      	bne.n	8002076 <xQueueGenericCreate+0x92>
        __asm volatile
 8002060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	613b      	str	r3, [r7, #16]
    }
 8002072:	bf00      	nop
 8002074:	e7fe      	b.n	8002074 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002076:	69fb      	ldr	r3, [r7, #28]
    }
 8002078:	4618      	mov	r0, r3
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d103      	bne.n	800209c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e002      	b.n	80020a2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020ae:	2101      	movs	r1, #1
 80020b0:	69b8      	ldr	r0, [r7, #24]
 80020b2:	f7ff ff07 	bl	8001ec4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	68f9      	ldr	r1, [r7, #12]
 80020c4:	2073      	movs	r0, #115	; 0x73
 80020c6:	f002 ff8f 	bl	8004fe8 <SEGGER_SYSVIEW_RecordU32x3>
}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b08f      	sub	sp, #60	; 0x3c
 80020d8:	af02      	add	r7, sp, #8
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80020e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10a      	bne.n	8002104 <xQueueReceive+0x30>
        __asm volatile
 80020ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f2:	f383 8811 	msr	BASEPRI, r3
 80020f6:	f3bf 8f6f 	isb	sy
 80020fa:	f3bf 8f4f 	dsb	sy
 80020fe:	623b      	str	r3, [r7, #32]
    }
 8002100:	bf00      	nop
 8002102:	e7fe      	b.n	8002102 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d103      	bne.n	8002112 <xQueueReceive+0x3e>
 800210a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <xQueueReceive+0x42>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <xQueueReceive+0x44>
 8002116:	2300      	movs	r3, #0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10a      	bne.n	8002132 <xQueueReceive+0x5e>
        __asm volatile
 800211c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002120:	f383 8811 	msr	BASEPRI, r3
 8002124:	f3bf 8f6f 	isb	sy
 8002128:	f3bf 8f4f 	dsb	sy
 800212c:	61fb      	str	r3, [r7, #28]
    }
 800212e:	bf00      	nop
 8002130:	e7fe      	b.n	8002130 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002132:	f001 f925 	bl	8003380 <xTaskGetSchedulerState>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <xQueueReceive+0x6e>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <xQueueReceive+0x72>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <xQueueReceive+0x74>
 8002146:	2300      	movs	r3, #0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10a      	bne.n	8002162 <xQueueReceive+0x8e>
        __asm volatile
 800214c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002150:	f383 8811 	msr	BASEPRI, r3
 8002154:	f3bf 8f6f 	isb	sy
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	61bb      	str	r3, [r7, #24]
    }
 800215e:	bf00      	nop
 8002160:	e7fe      	b.n	8002160 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002162:	f001 fde7 	bl	8003d34 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	2b00      	cmp	r3, #0
 8002170:	d02f      	beq.n	80021d2 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002176:	f000 f8bd 	bl	80022f4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800217a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217c:	4618      	mov	r0, r3
 800217e:	f003 fcbf 	bl	8005b00 <SEGGER_SYSVIEW_ShrinkId>
 8002182:	4604      	mov	r4, r0
 8002184:	2000      	movs	r0, #0
 8002186:	f003 fcbb 	bl	8005b00 <SEGGER_SYSVIEW_ShrinkId>
 800218a:	4602      	mov	r2, r0
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2101      	movs	r1, #1
 8002190:	9100      	str	r1, [sp, #0]
 8002192:	4621      	mov	r1, r4
 8002194:	205c      	movs	r0, #92	; 0x5c
 8002196:	f002 ff9d 	bl	80050d4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	1e5a      	subs	r2, r3, #1
 800219e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00f      	beq.n	80021ca <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ac:	3310      	adds	r3, #16
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 fed4 	bl	8002f5c <xTaskRemoveFromEventList>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d007      	beq.n	80021ca <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80021ba:	4b4d      	ldr	r3, [pc, #308]	; (80022f0 <xQueueReceive+0x21c>)
 80021bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	f3bf 8f4f 	dsb	sy
 80021c6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80021ca:	f001 fde3 	bl	8003d94 <vPortExitCritical>
                return pdPASS;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e08a      	b.n	80022e8 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d113      	bne.n	8002200 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80021d8:	f001 fddc 	bl	8003d94 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80021dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021de:	4618      	mov	r0, r3
 80021e0:	f003 fc8e 	bl	8005b00 <SEGGER_SYSVIEW_ShrinkId>
 80021e4:	4604      	mov	r4, r0
 80021e6:	2000      	movs	r0, #0
 80021e8:	f003 fc8a 	bl	8005b00 <SEGGER_SYSVIEW_ShrinkId>
 80021ec:	4602      	mov	r2, r0
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2101      	movs	r1, #1
 80021f2:	9100      	str	r1, [sp, #0]
 80021f4:	4621      	mov	r1, r4
 80021f6:	205c      	movs	r0, #92	; 0x5c
 80021f8:	f002 ff6c 	bl	80050d4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80021fc:	2300      	movs	r3, #0
 80021fe:	e073      	b.n	80022e8 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002206:	f107 0310 	add.w	r3, r7, #16
 800220a:	4618      	mov	r0, r3
 800220c:	f000 ff7e 	bl	800310c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002210:	2301      	movs	r3, #1
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002214:	f001 fdbe 	bl	8003d94 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002218:	f000 fb80 	bl	800291c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800221c:	f001 fd8a 	bl	8003d34 <vPortEnterCritical>
 8002220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002222:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002226:	b25b      	sxtb	r3, r3
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d103      	bne.n	8002236 <xQueueReceive+0x162>
 800222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800223c:	b25b      	sxtb	r3, r3
 800223e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002242:	d103      	bne.n	800224c <xQueueReceive+0x178>
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800224c:	f001 fda2 	bl	8003d94 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002250:	1d3a      	adds	r2, r7, #4
 8002252:	f107 0310 	add.w	r3, r7, #16
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f000 ff6d 	bl	8003138 <xTaskCheckForTimeOut>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d124      	bne.n	80022ae <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002266:	f000 f8bd 	bl	80023e4 <prvIsQueueEmpty>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d018      	beq.n	80022a2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002272:	3324      	adds	r3, #36	; 0x24
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	4611      	mov	r1, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f000 fe03 	bl	8002e84 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800227e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002280:	f000 f85e 	bl	8002340 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002284:	f000 fb58 	bl	8002938 <xTaskResumeAll>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	f47f af69 	bne.w	8002162 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002290:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <xQueueReceive+0x21c>)
 8002292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f3bf 8f4f 	dsb	sy
 800229c:	f3bf 8f6f 	isb	sy
 80022a0:	e75f      	b.n	8002162 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80022a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022a4:	f000 f84c 	bl	8002340 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80022a8:	f000 fb46 	bl	8002938 <xTaskResumeAll>
 80022ac:	e759      	b.n	8002162 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80022ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022b0:	f000 f846 	bl	8002340 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80022b4:	f000 fb40 	bl	8002938 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022ba:	f000 f893 	bl	80023e4 <prvIsQueueEmpty>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f43f af4e 	beq.w	8002162 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80022c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 fc19 	bl	8005b00 <SEGGER_SYSVIEW_ShrinkId>
 80022ce:	4604      	mov	r4, r0
 80022d0:	2000      	movs	r0, #0
 80022d2:	f003 fc15 	bl	8005b00 <SEGGER_SYSVIEW_ShrinkId>
 80022d6:	4602      	mov	r2, r0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2101      	movs	r1, #1
 80022dc:	9100      	str	r1, [sp, #0]
 80022de:	4621      	mov	r1, r4
 80022e0:	205c      	movs	r0, #92	; 0x5c
 80022e2:	f002 fef7 	bl	80050d4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80022e6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3734      	adds	r7, #52	; 0x34
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd90      	pop	{r4, r7, pc}
 80022f0:	e000ed04 	.word	0xe000ed04

080022f4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	2b00      	cmp	r3, #0
 8002304:	d018      	beq.n	8002338 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	441a      	add	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	429a      	cmp	r2, r3
 800231e:	d303      	bcc.n	8002328 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68d9      	ldr	r1, [r3, #12]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	461a      	mov	r2, r3
 8002332:	6838      	ldr	r0, [r7, #0]
 8002334:	f003 fd5e 	bl	8005df4 <memcpy>
    }
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002348:	f001 fcf4 	bl	8003d34 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002352:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002354:	e011      	b.n	800237a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	2b00      	cmp	r3, #0
 800235c:	d012      	beq.n	8002384 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3324      	adds	r3, #36	; 0x24
 8002362:	4618      	mov	r0, r3
 8002364:	f000 fdfa 	bl	8002f5c <xTaskRemoveFromEventList>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800236e:	f000 ff49 	bl	8003204 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	3b01      	subs	r3, #1
 8002376:	b2db      	uxtb	r3, r3
 8002378:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	2b00      	cmp	r3, #0
 8002380:	dce9      	bgt.n	8002356 <prvUnlockQueue+0x16>
 8002382:	e000      	b.n	8002386 <prvUnlockQueue+0x46>
                        break;
 8002384:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	22ff      	movs	r2, #255	; 0xff
 800238a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800238e:	f001 fd01 	bl	8003d94 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002392:	f001 fccf 	bl	8003d34 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800239c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800239e:	e011      	b.n	80023c4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d012      	beq.n	80023ce <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3310      	adds	r3, #16
 80023ac:	4618      	mov	r0, r3
 80023ae:	f000 fdd5 	bl	8002f5c <xTaskRemoveFromEventList>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80023b8:	f000 ff24 	bl	8003204 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80023bc:	7bbb      	ldrb	r3, [r7, #14]
 80023be:	3b01      	subs	r3, #1
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80023c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	dce9      	bgt.n	80023a0 <prvUnlockQueue+0x60>
 80023cc:	e000      	b.n	80023d0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80023ce:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	22ff      	movs	r2, #255	; 0xff
 80023d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80023d8:	f001 fcdc 	bl	8003d94 <vPortExitCritical>
}
 80023dc:	bf00      	nop
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80023ec:	f001 fca2 	bl	8003d34 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80023f8:	2301      	movs	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	e001      	b.n	8002402 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002402:	f001 fcc7 	bl	8003d94 <vPortExitCritical>

    return xReturn;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <vQueueAddToRegistry+0x26>
        __asm volatile
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	60fb      	str	r3, [r7, #12]
    }
 8002432:	bf00      	nop
 8002434:	e7fe      	b.n	8002434 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d024      	beq.n	800248a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	e01e      	b.n	8002484 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002446:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <vQueueAddToRegistry+0xa8>)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	429a      	cmp	r2, r3
 8002454:	d105      	bne.n	8002462 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <vQueueAddToRegistry+0xa8>)
 800245c:	4413      	add	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
                    break;
 8002460:	e013      	b.n	800248a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10a      	bne.n	800247e <vQueueAddToRegistry+0x6e>
 8002468:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <vQueueAddToRegistry+0xa8>)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4a0f      	ldr	r2, [pc, #60]	; (80024b8 <vQueueAddToRegistry+0xa8>)
 800247a:	4413      	add	r3, r2
 800247c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	3301      	adds	r3, #1
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b07      	cmp	r3, #7
 8002488:	d9dd      	bls.n	8002446 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00f      	beq.n	80024b0 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 fb2e 	bl	8005b00 <SEGGER_SYSVIEW_ShrinkId>
 80024a4:	4601      	mov	r1, r0
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	2071      	movs	r0, #113	; 0x71
 80024ac:	f002 fd42 	bl	8004f34 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80024b0:	bf00      	nop
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	200143b4 	.word	0x200143b4

080024bc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80024cc:	f001 fc32 	bl	8003d34 <vPortEnterCritical>
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024d6:	b25b      	sxtb	r3, r3
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024dc:	d103      	bne.n	80024e6 <vQueueWaitForMessageRestricted+0x2a>
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024ec:	b25b      	sxtb	r3, r3
 80024ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f2:	d103      	bne.n	80024fc <vQueueWaitForMessageRestricted+0x40>
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024fc:	f001 fc4a 	bl	8003d94 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002504:	2b00      	cmp	r3, #0
 8002506:	d106      	bne.n	8002516 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3324      	adds	r3, #36	; 0x24
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68b9      	ldr	r1, [r7, #8]
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fcdb 	bl	8002ecc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002516:	6978      	ldr	r0, [r7, #20]
 8002518:	f7ff ff12 	bl	8002340 <prvUnlockQueue>
    }
 800251c:	bf00      	nop
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002524:	b580      	push	{r7, lr}
 8002526:	b08c      	sub	sp, #48	; 0x30
 8002528:	af04      	add	r7, sp, #16
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4618      	mov	r0, r3
 800253a:	f001 fd27 	bl	8003f8c <pvPortMalloc>
 800253e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00e      	beq.n	8002564 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002546:	2058      	movs	r0, #88	; 0x58
 8002548:	f001 fd20 	bl	8003f8c <pvPortMalloc>
 800254c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	631a      	str	r2, [r3, #48]	; 0x30
 800255a:	e005      	b.n	8002568 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800255c:	6978      	ldr	r0, [r7, #20]
 800255e:	f001 fdf5 	bl	800414c <vPortFree>
 8002562:	e001      	b.n	8002568 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002564:	2300      	movs	r3, #0
 8002566:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d013      	beq.n	8002596 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800256e:	88fa      	ldrh	r2, [r7, #6]
 8002570:	2300      	movs	r3, #0
 8002572:	9303      	str	r3, [sp, #12]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	9302      	str	r3, [sp, #8]
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257a:	9301      	str	r3, [sp, #4]
 800257c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68b9      	ldr	r1, [r7, #8]
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f80e 	bl	80025a6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800258a:	69f8      	ldr	r0, [r7, #28]
 800258c:	f000 f8b0 	bl	80026f0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002590:	2301      	movs	r3, #1
 8002592:	61bb      	str	r3, [r7, #24]
 8002594:	e002      	b.n	800259c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800259c:	69bb      	ldr	r3, [r7, #24]
    }
 800259e:	4618      	mov	r0, r3
 80025a0:	3720      	adds	r7, #32
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b088      	sub	sp, #32
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	461a      	mov	r2, r3
 80025be:	21a5      	movs	r1, #165	; 0xa5
 80025c0:	f003 fc26 	bl	8005e10 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80025c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025ce:	3b01      	subs	r3, #1
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	f023 0307 	bic.w	r3, r3, #7
 80025dc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <prvInitialiseNewTask+0x58>
        __asm volatile
 80025e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	617b      	str	r3, [r7, #20]
    }
 80025fa:	bf00      	nop
 80025fc:	e7fe      	b.n	80025fc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01f      	beq.n	8002644 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002604:	2300      	movs	r3, #0
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	e012      	b.n	8002630 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	4413      	add	r3, r2
 8002610:	7819      	ldrb	r1, [r3, #0]
 8002612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	4413      	add	r3, r2
 8002618:	3334      	adds	r3, #52	; 0x34
 800261a:	460a      	mov	r2, r1
 800261c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	4413      	add	r3, r2
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3301      	adds	r3, #1
 800262e:	61fb      	str	r3, [r7, #28]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b09      	cmp	r3, #9
 8002634:	d9e9      	bls.n	800260a <prvInitialiseNewTask+0x64>
 8002636:	e000      	b.n	800263a <prvInitialiseNewTask+0x94>
            {
                break;
 8002638:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002642:	e003      	b.n	800264c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	2b04      	cmp	r3, #4
 8002650:	d90a      	bls.n	8002668 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002656:	f383 8811 	msr	BASEPRI, r3
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	f3bf 8f4f 	dsb	sy
 8002662:	613b      	str	r3, [r7, #16]
    }
 8002664:	bf00      	nop
 8002666:	e7fe      	b.n	8002666 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266a:	2b04      	cmp	r3, #4
 800266c:	d901      	bls.n	8002672 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800266e:	2304      	movs	r3, #4
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800267c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	2200      	movs	r2, #0
 8002682:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	3304      	adds	r3, #4
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fbab 	bl	8001de4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	3318      	adds	r3, #24
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fba6 	bl	8001de4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800269c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	f1c3 0205 	rsb	r2, r3, #5
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	3350      	adds	r3, #80	; 0x50
 80026b2:	2204      	movs	r2, #4
 80026b4:	2100      	movs	r1, #0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 fbaa 	bl	8005e10 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80026bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026be:	3354      	adds	r3, #84	; 0x54
 80026c0:	2201      	movs	r2, #1
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f003 fba3 	bl	8005e10 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	68f9      	ldr	r1, [r7, #12]
 80026ce:	69b8      	ldr	r0, [r7, #24]
 80026d0:	f001 f984 	bl	80039dc <pxPortInitialiseStack>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d002      	beq.n	80026e6 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026e4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026e6:	bf00      	nop
 80026e8:	3720      	adds	r7, #32
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80026f0:	b5b0      	push	{r4, r5, r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80026f8:	f001 fb1c 	bl	8003d34 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80026fc:	4b4f      	ldr	r3, [pc, #316]	; (800283c <prvAddNewTaskToReadyList+0x14c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3301      	adds	r3, #1
 8002702:	4a4e      	ldr	r2, [pc, #312]	; (800283c <prvAddNewTaskToReadyList+0x14c>)
 8002704:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002706:	4b4e      	ldr	r3, [pc, #312]	; (8002840 <prvAddNewTaskToReadyList+0x150>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800270e:	4a4c      	ldr	r2, [pc, #304]	; (8002840 <prvAddNewTaskToReadyList+0x150>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002714:	4b49      	ldr	r3, [pc, #292]	; (800283c <prvAddNewTaskToReadyList+0x14c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d110      	bne.n	800273e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800271c:	f000 fd96 	bl	800324c <prvInitialiseTaskLists>
 8002720:	e00d      	b.n	800273e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002722:	4b48      	ldr	r3, [pc, #288]	; (8002844 <prvAddNewTaskToReadyList+0x154>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800272a:	4b45      	ldr	r3, [pc, #276]	; (8002840 <prvAddNewTaskToReadyList+0x150>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002734:	429a      	cmp	r2, r3
 8002736:	d802      	bhi.n	800273e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002738:	4a41      	ldr	r2, [pc, #260]	; (8002840 <prvAddNewTaskToReadyList+0x150>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800273e:	4b42      	ldr	r3, [pc, #264]	; (8002848 <prvAddNewTaskToReadyList+0x158>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	3301      	adds	r3, #1
 8002744:	4a40      	ldr	r2, [pc, #256]	; (8002848 <prvAddNewTaskToReadyList+0x158>)
 8002746:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002748:	4b3f      	ldr	r3, [pc, #252]	; (8002848 <prvAddNewTaskToReadyList+0x158>)
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d016      	beq.n	8002784 <prvAddNewTaskToReadyList+0x94>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4618      	mov	r0, r3
 800275a:	f003 f8ab 	bl	80058b4 <SEGGER_SYSVIEW_OnTaskCreate>
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	461d      	mov	r5, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	461c      	mov	r4, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	1ae3      	subs	r3, r4, r3
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	462b      	mov	r3, r5
 8002780:	f001 feaa 	bl	80044d8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4618      	mov	r0, r3
 8002788:	f003 f918 	bl	80059bc <SEGGER_SYSVIEW_OnTaskStartReady>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	2201      	movs	r2, #1
 8002792:	409a      	lsls	r2, r3
 8002794:	4b2d      	ldr	r3, [pc, #180]	; (800284c <prvAddNewTaskToReadyList+0x15c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4313      	orrs	r3, r2
 800279a:	4a2c      	ldr	r2, [pc, #176]	; (800284c <prvAddNewTaskToReadyList+0x15c>)
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a2:	492b      	ldr	r1, [pc, #172]	; (8002850 <prvAddNewTaskToReadyList+0x160>)
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	3304      	adds	r3, #4
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	3204      	adds	r2, #4
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	1d1a      	adds	r2, r3, #4
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <prvAddNewTaskToReadyList+0x160>)
 80027e2:	441a      	add	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	615a      	str	r2, [r3, #20]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ec:	4918      	ldr	r1, [pc, #96]	; (8002850 <prvAddNewTaskToReadyList+0x160>)
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	1c59      	adds	r1, r3, #1
 80027fc:	4814      	ldr	r0, [pc, #80]	; (8002850 <prvAddNewTaskToReadyList+0x160>)
 80027fe:	4613      	mov	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4403      	add	r3, r0
 8002808:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800280a:	f001 fac3 	bl	8003d94 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800280e:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <prvAddNewTaskToReadyList+0x154>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00e      	beq.n	8002834 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <prvAddNewTaskToReadyList+0x150>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	429a      	cmp	r2, r3
 8002822:	d207      	bcs.n	8002834 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <prvAddNewTaskToReadyList+0x164>)
 8002826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	f3bf 8f4f 	dsb	sy
 8002830:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002834:	bf00      	nop
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bdb0      	pop	{r4, r5, r7, pc}
 800283c:	20000108 	.word	0x20000108
 8002840:	20000030 	.word	0x20000030
 8002844:	20000114 	.word	0x20000114
 8002848:	20000124 	.word	0x20000124
 800284c:	20000110 	.word	0x20000110
 8002850:	20000034 	.word	0x20000034
 8002854:	e000ed04 	.word	0xe000ed04

08002858 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800285e:	4b27      	ldr	r3, [pc, #156]	; (80028fc <vTaskStartScheduler+0xa4>)
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	2300      	movs	r3, #0
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2300      	movs	r3, #0
 8002868:	2282      	movs	r2, #130	; 0x82
 800286a:	4925      	ldr	r1, [pc, #148]	; (8002900 <vTaskStartScheduler+0xa8>)
 800286c:	4825      	ldr	r0, [pc, #148]	; (8002904 <vTaskStartScheduler+0xac>)
 800286e:	f7ff fe59 	bl	8002524 <xTaskCreate>
 8002872:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d102      	bne.n	8002880 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800287a:	f000 fe2b 	bl	80034d4 <xTimerCreateTimerTask>
 800287e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d124      	bne.n	80028d0 <vTaskStartScheduler+0x78>
        __asm volatile
 8002886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	60bb      	str	r3, [r7, #8]
    }
 8002898:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <vTaskStartScheduler+0xb0>)
 800289c:	f04f 32ff 	mov.w	r2, #4294967295
 80028a0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80028a2:	4b1a      	ldr	r3, [pc, #104]	; (800290c <vTaskStartScheduler+0xb4>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028a8:	4b19      	ldr	r3, [pc, #100]	; (8002910 <vTaskStartScheduler+0xb8>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80028ae:	4b19      	ldr	r3, [pc, #100]	; (8002914 <vTaskStartScheduler+0xbc>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <vTaskStartScheduler+0xa4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d102      	bne.n	80028c0 <vTaskStartScheduler+0x68>
 80028ba:	f002 ffdf 	bl	800587c <SEGGER_SYSVIEW_OnIdle>
 80028be:	e004      	b.n	80028ca <vTaskStartScheduler+0x72>
 80028c0:	4b14      	ldr	r3, [pc, #80]	; (8002914 <vTaskStartScheduler+0xbc>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 f837 	bl	8005938 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80028ca:	f001 f913 	bl	8003af4 <xPortStartScheduler>
 80028ce:	e00e      	b.n	80028ee <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d6:	d10a      	bne.n	80028ee <vTaskStartScheduler+0x96>
        __asm volatile
 80028d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028dc:	f383 8811 	msr	BASEPRI, r3
 80028e0:	f3bf 8f6f 	isb	sy
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	607b      	str	r3, [r7, #4]
    }
 80028ea:	bf00      	nop
 80028ec:	e7fe      	b.n	80028ec <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <vTaskStartScheduler+0xc0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
}
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	2000012c 	.word	0x2000012c
 8002900:	08005e9c 	.word	0x08005e9c
 8002904:	0800321d 	.word	0x0800321d
 8002908:	20000128 	.word	0x20000128
 800290c:	20000114 	.word	0x20000114
 8002910:	2000010c 	.word	0x2000010c
 8002914:	20000030 	.word	0x20000030
 8002918:	2000000c 	.word	0x2000000c

0800291c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <vTaskSuspendAll+0x18>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	4a03      	ldr	r2, [pc, #12]	; (8002934 <vTaskSuspendAll+0x18>)
 8002928:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	20000130 	.word	0x20000130

08002938 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002946:	4b73      	ldr	r3, [pc, #460]	; (8002b14 <xTaskResumeAll+0x1dc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10a      	bne.n	8002964 <xTaskResumeAll+0x2c>
        __asm volatile
 800294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002952:	f383 8811 	msr	BASEPRI, r3
 8002956:	f3bf 8f6f 	isb	sy
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	607b      	str	r3, [r7, #4]
    }
 8002960:	bf00      	nop
 8002962:	e7fe      	b.n	8002962 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002964:	f001 f9e6 	bl	8003d34 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002968:	4b6a      	ldr	r3, [pc, #424]	; (8002b14 <xTaskResumeAll+0x1dc>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	3b01      	subs	r3, #1
 800296e:	4a69      	ldr	r2, [pc, #420]	; (8002b14 <xTaskResumeAll+0x1dc>)
 8002970:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002972:	4b68      	ldr	r3, [pc, #416]	; (8002b14 <xTaskResumeAll+0x1dc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f040 80c4 	bne.w	8002b04 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800297c:	4b66      	ldr	r3, [pc, #408]	; (8002b18 <xTaskResumeAll+0x1e0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80bf 	beq.w	8002b04 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002986:	e08e      	b.n	8002aa6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002988:	4b64      	ldr	r3, [pc, #400]	; (8002b1c <xTaskResumeAll+0x1e4>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	6a12      	ldr	r2, [r2, #32]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	69d2      	ldr	r2, [r2, #28]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3318      	adds	r3, #24
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d103      	bne.n	80029be <xTaskResumeAll+0x86>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	6a1a      	ldr	r2, [r3, #32]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	2200      	movs	r2, #0
 80029c2:	629a      	str	r2, [r3, #40]	; 0x28
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	1e5a      	subs	r2, r3, #1
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	68d2      	ldr	r2, [r2, #12]
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	6892      	ldr	r2, [r2, #8]
 80029e6:	605a      	str	r2, [r3, #4]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	3304      	adds	r3, #4
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d103      	bne.n	80029fc <xTaskResumeAll+0xc4>
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2200      	movs	r2, #0
 8002a00:	615a      	str	r2, [r3, #20]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	1e5a      	subs	r2, r3, #1
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f002 ffd4 	bl	80059bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a18:	2201      	movs	r2, #1
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	4b40      	ldr	r3, [pc, #256]	; (8002b20 <xTaskResumeAll+0x1e8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	4a3f      	ldr	r2, [pc, #252]	; (8002b20 <xTaskResumeAll+0x1e8>)
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a2a:	493e      	ldr	r1, [pc, #248]	; (8002b24 <xTaskResumeAll+0x1ec>)
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	3304      	adds	r3, #4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	69fa      	ldr	r2, [r7, #28]
 8002a50:	3204      	adds	r2, #4
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	1d1a      	adds	r2, r3, #4
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4a2e      	ldr	r2, [pc, #184]	; (8002b24 <xTaskResumeAll+0x1ec>)
 8002a6a:	441a      	add	r2, r3
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	615a      	str	r2, [r3, #20]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a74:	492b      	ldr	r1, [pc, #172]	; (8002b24 <xTaskResumeAll+0x1ec>)
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	440b      	add	r3, r1
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	1c59      	adds	r1, r3, #1
 8002a84:	4827      	ldr	r0, [pc, #156]	; (8002b24 <xTaskResumeAll+0x1ec>)
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4403      	add	r3, r0
 8002a90:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a96:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <xTaskResumeAll+0x1f0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d302      	bcc.n	8002aa6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002aa0:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <xTaskResumeAll+0x1f4>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002aa6:	4b1d      	ldr	r3, [pc, #116]	; (8002b1c <xTaskResumeAll+0x1e4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f47f af6c 	bne.w	8002988 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ab6:	f000 fc47 	bl	8003348 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002aba:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <xTaskResumeAll+0x1f8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d010      	beq.n	8002ae8 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ac6:	f000 f859 	bl	8002b7c <xTaskIncrementTick>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002ad0:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <xTaskResumeAll+0x1f4>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f1      	bne.n	8002ac6 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <xTaskResumeAll+0x1f8>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ae8:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <xTaskResumeAll+0x1f4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002af0:	2301      	movs	r3, #1
 8002af2:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002af4:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <xTaskResumeAll+0x1fc>)
 8002af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002b04:	f001 f946 	bl	8003d94 <vPortExitCritical>

    return xAlreadyYielded;
 8002b08:	69bb      	ldr	r3, [r7, #24]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000130 	.word	0x20000130
 8002b18:	20000108 	.word	0x20000108
 8002b1c:	200000c8 	.word	0x200000c8
 8002b20:	20000110 	.word	0x20000110
 8002b24:	20000034 	.word	0x20000034
 8002b28:	20000030 	.word	0x20000030
 8002b2c:	2000011c 	.word	0x2000011c
 8002b30:	20000118 	.word	0x20000118
 8002b34:	e000ed04 	.word	0xe000ed04

08002b38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <xTaskGetTickCount+0x1c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002b44:	687b      	ldr	r3, [r7, #4]
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	2000010c 	.word	0x2000010c

08002b58 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b5e:	f001 f9d5 	bl	8003f0c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002b62:	2300      	movs	r3, #0
 8002b64:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002b66:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <xTaskGetTickCountFromISR+0x20>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b6c:	683b      	ldr	r3, [r7, #0]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	2000010c 	.word	0x2000010c

08002b7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b86:	4b7f      	ldr	r3, [pc, #508]	; (8002d84 <xTaskIncrementTick+0x208>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f040 80f0 	bne.w	8002d70 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b90:	4b7d      	ldr	r3, [pc, #500]	; (8002d88 <xTaskIncrementTick+0x20c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3301      	adds	r3, #1
 8002b96:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002b98:	4a7b      	ldr	r2, [pc, #492]	; (8002d88 <xTaskIncrementTick+0x20c>)
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d120      	bne.n	8002be6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ba4:	4b79      	ldr	r3, [pc, #484]	; (8002d8c <xTaskIncrementTick+0x210>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <xTaskIncrementTick+0x48>
        __asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	607b      	str	r3, [r7, #4]
    }
 8002bc0:	bf00      	nop
 8002bc2:	e7fe      	b.n	8002bc2 <xTaskIncrementTick+0x46>
 8002bc4:	4b71      	ldr	r3, [pc, #452]	; (8002d8c <xTaskIncrementTick+0x210>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	4b71      	ldr	r3, [pc, #452]	; (8002d90 <xTaskIncrementTick+0x214>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a6f      	ldr	r2, [pc, #444]	; (8002d8c <xTaskIncrementTick+0x210>)
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	4a6f      	ldr	r2, [pc, #444]	; (8002d90 <xTaskIncrementTick+0x214>)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	4b6e      	ldr	r3, [pc, #440]	; (8002d94 <xTaskIncrementTick+0x218>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	4a6d      	ldr	r2, [pc, #436]	; (8002d94 <xTaskIncrementTick+0x218>)
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	f000 fbb1 	bl	8003348 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002be6:	4b6c      	ldr	r3, [pc, #432]	; (8002d98 <xTaskIncrementTick+0x21c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6a3a      	ldr	r2, [r7, #32]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	f0c0 80aa 	bcc.w	8002d46 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bf2:	4b66      	ldr	r3, [pc, #408]	; (8002d8c <xTaskIncrementTick+0x210>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d104      	bne.n	8002c06 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bfc:	4b66      	ldr	r3, [pc, #408]	; (8002d98 <xTaskIncrementTick+0x21c>)
 8002bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8002c02:	601a      	str	r2, [r3, #0]
                    break;
 8002c04:	e09f      	b.n	8002d46 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c06:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <xTaskIncrementTick+0x210>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002c16:	6a3a      	ldr	r2, [r7, #32]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d203      	bcs.n	8002c26 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002c1e:	4a5e      	ldr	r2, [pc, #376]	; (8002d98 <xTaskIncrementTick+0x21c>)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002c24:	e08f      	b.n	8002d46 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	68d2      	ldr	r2, [r2, #12]
 8002c34:	609a      	str	r2, [r3, #8]
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	6892      	ldr	r2, [r2, #8]
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	3304      	adds	r3, #4
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d103      	bne.n	8002c54 <xTaskIncrementTick+0xd8>
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2200      	movs	r2, #0
 8002c58:	615a      	str	r2, [r3, #20]
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	1e5a      	subs	r2, r3, #1
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01e      	beq.n	8002caa <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	6a12      	ldr	r2, [r2, #32]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	69d2      	ldr	r2, [r2, #28]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	3318      	adds	r3, #24
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d103      	bne.n	8002c9a <xTaskIncrementTick+0x11e>
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	6a1a      	ldr	r2, [r3, #32]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	1e5a      	subs	r2, r3, #1
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f002 fe85 	bl	80059bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <xTaskIncrementTick+0x220>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	4a36      	ldr	r2, [pc, #216]	; (8002d9c <xTaskIncrementTick+0x220>)
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc8:	4935      	ldr	r1, [pc, #212]	; (8002da0 <xTaskIncrementTick+0x224>)
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	60da      	str	r2, [r3, #12]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	3204      	adds	r2, #4
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	1d1a      	adds	r2, r3, #4
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4a26      	ldr	r2, [pc, #152]	; (8002da0 <xTaskIncrementTick+0x224>)
 8002d08:	441a      	add	r2, r3
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	615a      	str	r2, [r3, #20]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d12:	4923      	ldr	r1, [pc, #140]	; (8002da0 <xTaskIncrementTick+0x224>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	1c59      	adds	r1, r3, #1
 8002d22:	481f      	ldr	r0, [pc, #124]	; (8002da0 <xTaskIncrementTick+0x224>)
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4403      	add	r3, r0
 8002d2e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <xTaskIncrementTick+0x228>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	f4ff af59 	bcc.w	8002bf2 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002d40:	2301      	movs	r3, #1
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d44:	e755      	b.n	8002bf2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d46:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <xTaskIncrementTick+0x228>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4c:	4914      	ldr	r1, [pc, #80]	; (8002da0 <xTaskIncrementTick+0x224>)
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d901      	bls.n	8002d62 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002d62:	4b11      	ldr	r3, [pc, #68]	; (8002da8 <xTaskIncrementTick+0x22c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d007      	beq.n	8002d7a <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6e:	e004      	b.n	8002d7a <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002d70:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <xTaskIncrementTick+0x230>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <xTaskIncrementTick+0x230>)
 8002d78:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3728      	adds	r7, #40	; 0x28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000130 	.word	0x20000130
 8002d88:	2000010c 	.word	0x2000010c
 8002d8c:	200000c0 	.word	0x200000c0
 8002d90:	200000c4 	.word	0x200000c4
 8002d94:	20000120 	.word	0x20000120
 8002d98:	20000128 	.word	0x20000128
 8002d9c:	20000110 	.word	0x20000110
 8002da0:	20000034 	.word	0x20000034
 8002da4:	20000030 	.word	0x20000030
 8002da8:	2000011c 	.word	0x2000011c
 8002dac:	20000118 	.word	0x20000118

08002db0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002db6:	4b2d      	ldr	r3, [pc, #180]	; (8002e6c <vTaskSwitchContext+0xbc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <vTaskSwitchContext+0xc0>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002dc4:	e04d      	b.n	8002e62 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002dc6:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <vTaskSwitchContext+0xc0>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dcc:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <vTaskSwitchContext+0xc4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	fab3 f383 	clz	r3, r3
 8002dd8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002dda:	7afb      	ldrb	r3, [r7, #11]
 8002ddc:	f1c3 031f 	rsb	r3, r3, #31
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	4925      	ldr	r1, [pc, #148]	; (8002e78 <vTaskSwitchContext+0xc8>)
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	607b      	str	r3, [r7, #4]
    }
 8002e08:	bf00      	nop
 8002e0a:	e7fe      	b.n	8002e0a <vTaskSwitchContext+0x5a>
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <vTaskSwitchContext+0xc8>)
 8002e18:	4413      	add	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d104      	bne.n	8002e3c <vTaskSwitchContext+0x8c>
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <vTaskSwitchContext+0xcc>)
 8002e44:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002e46:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <vTaskSwitchContext+0xcc>)
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	; (8002e80 <vTaskSwitchContext+0xd0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d102      	bne.n	8002e58 <vTaskSwitchContext+0xa8>
 8002e52:	f002 fd13 	bl	800587c <SEGGER_SYSVIEW_OnIdle>
}
 8002e56:	e004      	b.n	8002e62 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <vTaskSwitchContext+0xcc>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f002 fd6b 	bl	8005938 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002e62:	bf00      	nop
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000130 	.word	0x20000130
 8002e70:	2000011c 	.word	0x2000011c
 8002e74:	20000110 	.word	0x20000110
 8002e78:	20000034 	.word	0x20000034
 8002e7c:	20000030 	.word	0x20000030
 8002e80:	2000012c 	.word	0x2000012c

08002e84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	60fb      	str	r3, [r7, #12]
    }
 8002ea6:	bf00      	nop
 8002ea8:	e7fe      	b.n	8002ea8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002eaa:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <vTaskPlaceOnEventList+0x44>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3318      	adds	r3, #24
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fe ffa3 	bl	8001dfe <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002eb8:	2101      	movs	r1, #1
 8002eba:	6838      	ldr	r0, [r7, #0]
 8002ebc:	f000 fa7e 	bl	80033bc <prvAddCurrentTaskToDelayedList>
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000030 	.word	0x20000030

08002ecc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d10a      	bne.n	8002ef4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	613b      	str	r3, [r7, #16]
    }
 8002ef0:	bf00      	nop
 8002ef2:	e7fe      	b.n	8002ef2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	61da      	str	r2, [r3, #28]
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	6892      	ldr	r2, [r2, #8]
 8002f0a:	621a      	str	r2, [r3, #32]
 8002f0c:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	3218      	adds	r2, #24
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	4b0f      	ldr	r3, [pc, #60]	; (8002f58 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f103 0218 	add.w	r2, r3, #24
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f40:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002f42:	2024      	movs	r0, #36	; 0x24
 8002f44:	f001 ff9c 	bl	8004e80 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	68b8      	ldr	r0, [r7, #8]
 8002f4c:	f000 fa36 	bl	80033bc <prvAddCurrentTaskToDelayedList>
    }
 8002f50:	bf00      	nop
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20000030 	.word	0x20000030

08002f5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10a      	bne.n	8002f88 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	60fb      	str	r3, [r7, #12]
    }
 8002f84:	bf00      	nop
 8002f86:	e7fe      	b.n	8002f86 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	6a3a      	ldr	r2, [r7, #32]
 8002f94:	6a12      	ldr	r2, [r2, #32]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	6a3a      	ldr	r2, [r7, #32]
 8002f9e:	69d2      	ldr	r2, [r2, #28]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	3318      	adds	r3, #24
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d103      	bne.n	8002fb6 <xTaskRemoveFromEventList+0x5a>
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	6a1a      	ldr	r2, [r3, #32]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	1e5a      	subs	r2, r3, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fc6:	4b4b      	ldr	r3, [pc, #300]	; (80030f4 <xTaskRemoveFromEventList+0x198>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d162      	bne.n	8003094 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	6a3a      	ldr	r2, [r7, #32]
 8002fda:	68d2      	ldr	r2, [r2, #12]
 8002fdc:	609a      	str	r2, [r3, #8]
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	6a3a      	ldr	r2, [r7, #32]
 8002fe4:	6892      	ldr	r2, [r2, #8]
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d103      	bne.n	8002ffc <xTaskRemoveFromEventList+0xa0>
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	605a      	str	r2, [r3, #4]
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	2200      	movs	r2, #0
 8003000:	615a      	str	r2, [r3, #20]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	1e5a      	subs	r2, r3, #1
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800300c:	6a3b      	ldr	r3, [r7, #32]
 800300e:	4618      	mov	r0, r3
 8003010:	f002 fcd4 	bl	80059bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	2201      	movs	r2, #1
 800301a:	409a      	lsls	r2, r3
 800301c:	4b36      	ldr	r3, [pc, #216]	; (80030f8 <xTaskRemoveFromEventList+0x19c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4313      	orrs	r3, r2
 8003022:	4a35      	ldr	r2, [pc, #212]	; (80030f8 <xTaskRemoveFromEventList+0x19c>)
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302a:	4934      	ldr	r1, [pc, #208]	; (80030fc <xTaskRemoveFromEventList+0x1a0>)
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	3304      	adds	r3, #4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	609a      	str	r2, [r3, #8]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	6a3a      	ldr	r2, [r7, #32]
 8003050:	3204      	adds	r2, #4
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	1d1a      	adds	r2, r3, #4
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4a24      	ldr	r2, [pc, #144]	; (80030fc <xTaskRemoveFromEventList+0x1a0>)
 800306a:	441a      	add	r2, r3
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	615a      	str	r2, [r3, #20]
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003074:	4921      	ldr	r1, [pc, #132]	; (80030fc <xTaskRemoveFromEventList+0x1a0>)
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	1c59      	adds	r1, r3, #1
 8003084:	481d      	ldr	r0, [pc, #116]	; (80030fc <xTaskRemoveFromEventList+0x1a0>)
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4403      	add	r3, r0
 8003090:	6019      	str	r1, [r3, #0]
 8003092:	e01b      	b.n	80030cc <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003094:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <xTaskRemoveFromEventList+0x1a4>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	61da      	str	r2, [r3, #28]
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	621a      	str	r2, [r3, #32]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	6a3a      	ldr	r2, [r7, #32]
 80030ae:	3218      	adds	r2, #24
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	f103 0218 	add.w	r2, r3, #24
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	4a10      	ldr	r2, [pc, #64]	; (8003100 <xTaskRemoveFromEventList+0x1a4>)
 80030c0:	629a      	str	r2, [r3, #40]	; 0x28
 80030c2:	4b0f      	ldr	r3, [pc, #60]	; (8003100 <xTaskRemoveFromEventList+0x1a4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3301      	adds	r3, #1
 80030c8:	4a0d      	ldr	r2, [pc, #52]	; (8003100 <xTaskRemoveFromEventList+0x1a4>)
 80030ca:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <xTaskRemoveFromEventList+0x1a8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d905      	bls.n	80030e6 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80030da:	2301      	movs	r3, #1
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80030de:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <xTaskRemoveFromEventList+0x1ac>)
 80030e0:	2201      	movs	r2, #1
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	e001      	b.n	80030ea <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80030ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3728      	adds	r7, #40	; 0x28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000130 	.word	0x20000130
 80030f8:	20000110 	.word	0x20000110
 80030fc:	20000034 	.word	0x20000034
 8003100:	200000c8 	.word	0x200000c8
 8003104:	20000030 	.word	0x20000030
 8003108:	2000011c 	.word	0x2000011c

0800310c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <vTaskInternalSetTimeOutState+0x24>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <vTaskInternalSetTimeOutState+0x28>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	605a      	str	r2, [r3, #4]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	20000120 	.word	0x20000120
 8003134:	2000010c 	.word	0x2000010c

08003138 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10a      	bne.n	800315e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	613b      	str	r3, [r7, #16]
    }
 800315a:	bf00      	nop
 800315c:	e7fe      	b.n	800315c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10a      	bne.n	800317a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	60fb      	str	r3, [r7, #12]
    }
 8003176:	bf00      	nop
 8003178:	e7fe      	b.n	8003178 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800317a:	f000 fddb 	bl	8003d34 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800317e:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <xTaskCheckForTimeOut+0xc4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003196:	d102      	bne.n	800319e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
 800319c:	e026      	b.n	80031ec <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4b17      	ldr	r3, [pc, #92]	; (8003200 <xTaskCheckForTimeOut+0xc8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d00a      	beq.n	80031c0 <xTaskCheckForTimeOut+0x88>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d305      	bcc.n	80031c0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80031b4:	2301      	movs	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e015      	b.n	80031ec <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d20b      	bcs.n	80031e2 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	1ad2      	subs	r2, r2, r3
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff ff98 	bl	800310c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
 80031e0:	e004      	b.n	80031ec <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80031e8:	2301      	movs	r3, #1
 80031ea:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80031ec:	f000 fdd2 	bl	8003d94 <vPortExitCritical>

    return xReturn;
 80031f0:	69fb      	ldr	r3, [r7, #28]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3720      	adds	r7, #32
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	2000010c 	.word	0x2000010c
 8003200:	20000120 	.word	0x20000120

08003204 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <vTaskMissedYield+0x14>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]
}
 800320e:	bf00      	nop
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	2000011c 	.word	0x2000011c

0800321c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003224:	f000 f852 	bl	80032cc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <prvIdleTask+0x28>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d9f9      	bls.n	8003224 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <prvIdleTask+0x2c>)
 8003232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003240:	e7f0      	b.n	8003224 <prvIdleTask+0x8>
 8003242:	bf00      	nop
 8003244:	20000034 	.word	0x20000034
 8003248:	e000ed04 	.word	0xe000ed04

0800324c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003252:	2300      	movs	r3, #0
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	e00c      	b.n	8003272 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4a12      	ldr	r2, [pc, #72]	; (80032ac <prvInitialiseTaskLists+0x60>)
 8003264:	4413      	add	r3, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fd9c 	bl	8001da4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3301      	adds	r3, #1
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d9ef      	bls.n	8003258 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003278:	480d      	ldr	r0, [pc, #52]	; (80032b0 <prvInitialiseTaskLists+0x64>)
 800327a:	f7fe fd93 	bl	8001da4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800327e:	480d      	ldr	r0, [pc, #52]	; (80032b4 <prvInitialiseTaskLists+0x68>)
 8003280:	f7fe fd90 	bl	8001da4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003284:	480c      	ldr	r0, [pc, #48]	; (80032b8 <prvInitialiseTaskLists+0x6c>)
 8003286:	f7fe fd8d 	bl	8001da4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800328a:	480c      	ldr	r0, [pc, #48]	; (80032bc <prvInitialiseTaskLists+0x70>)
 800328c:	f7fe fd8a 	bl	8001da4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003290:	480b      	ldr	r0, [pc, #44]	; (80032c0 <prvInitialiseTaskLists+0x74>)
 8003292:	f7fe fd87 	bl	8001da4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <prvInitialiseTaskLists+0x78>)
 8003298:	4a05      	ldr	r2, [pc, #20]	; (80032b0 <prvInitialiseTaskLists+0x64>)
 800329a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <prvInitialiseTaskLists+0x7c>)
 800329e:	4a05      	ldr	r2, [pc, #20]	; (80032b4 <prvInitialiseTaskLists+0x68>)
 80032a0:	601a      	str	r2, [r3, #0]
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000034 	.word	0x20000034
 80032b0:	20000098 	.word	0x20000098
 80032b4:	200000ac 	.word	0x200000ac
 80032b8:	200000c8 	.word	0x200000c8
 80032bc:	200000dc 	.word	0x200000dc
 80032c0:	200000f4 	.word	0x200000f4
 80032c4:	200000c0 	.word	0x200000c0
 80032c8:	200000c4 	.word	0x200000c4

080032cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032d2:	e019      	b.n	8003308 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80032d4:	f000 fd2e 	bl	8003d34 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032d8:	4b10      	ldr	r3, [pc, #64]	; (800331c <prvCheckTasksWaitingTermination+0x50>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe fdc3 	bl	8001e70 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80032ea:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <prvCheckTasksWaitingTermination+0x54>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	4a0b      	ldr	r2, [pc, #44]	; (8003320 <prvCheckTasksWaitingTermination+0x54>)
 80032f2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <prvCheckTasksWaitingTermination+0x58>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <prvCheckTasksWaitingTermination+0x58>)
 80032fc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80032fe:	f000 fd49 	bl	8003d94 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f810 	bl	8003328 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <prvCheckTasksWaitingTermination+0x58>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1e1      	bne.n	80032d4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	200000dc 	.word	0x200000dc
 8003320:	20000108 	.word	0x20000108
 8003324:	200000f0 	.word	0x200000f0

08003328 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	4618      	mov	r0, r3
 8003336:	f000 ff09 	bl	800414c <vPortFree>
                vPortFree( pxTCB );
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 ff06 	bl	800414c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800334c:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <prvResetNextTaskUnblockTime+0x30>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d104      	bne.n	8003360 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <prvResetNextTaskUnblockTime+0x34>)
 8003358:	f04f 32ff 	mov.w	r2, #4294967295
 800335c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800335e:	e005      	b.n	800336c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <prvResetNextTaskUnblockTime+0x30>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a04      	ldr	r2, [pc, #16]	; (800337c <prvResetNextTaskUnblockTime+0x34>)
 800336a:	6013      	str	r3, [r2, #0]
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	200000c0 	.word	0x200000c0
 800337c:	20000128 	.word	0x20000128

08003380 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003386:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <xTaskGetSchedulerState+0x34>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d102      	bne.n	8003394 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800338e:	2301      	movs	r3, #1
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	e008      	b.n	80033a6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003394:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <xTaskGetSchedulerState+0x38>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d102      	bne.n	80033a2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800339c:	2302      	movs	r3, #2
 800339e:	607b      	str	r3, [r7, #4]
 80033a0:	e001      	b.n	80033a6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80033a2:	2300      	movs	r3, #0
 80033a4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80033a6:	687b      	ldr	r3, [r7, #4]
    }
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	20000114 	.word	0x20000114
 80033b8:	20000130 	.word	0x20000130

080033bc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80033c6:	4b3c      	ldr	r3, [pc, #240]	; (80034b8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033cc:	4b3b      	ldr	r3, [pc, #236]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3304      	adds	r3, #4
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fe fd4c 	bl	8001e70 <uxListRemove>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80033de:	4b37      	ldr	r3, [pc, #220]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	2201      	movs	r2, #1
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <prvAddCurrentTaskToDelayedList+0x104>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4013      	ands	r3, r2
 80033f2:	4a33      	ldr	r2, [pc, #204]	; (80034c0 <prvAddCurrentTaskToDelayedList+0x104>)
 80033f4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d124      	bne.n	8003448 <prvAddCurrentTaskToDelayedList+0x8c>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d021      	beq.n	8003448 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003404:	4b2f      	ldr	r3, [pc, #188]	; (80034c4 <prvAddCurrentTaskToDelayedList+0x108>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	4b2a      	ldr	r3, [pc, #168]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	6892      	ldr	r2, [r2, #8]
 800341a:	60da      	str	r2, [r3, #12]
 800341c:	4b27      	ldr	r3, [pc, #156]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	3204      	adds	r2, #4
 8003426:	605a      	str	r2, [r3, #4]
 8003428:	4b24      	ldr	r3, [pc, #144]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	1d1a      	adds	r2, r3, #4
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	4b22      	ldr	r3, [pc, #136]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a23      	ldr	r2, [pc, #140]	; (80034c4 <prvAddCurrentTaskToDelayedList+0x108>)
 8003438:	615a      	str	r2, [r3, #20]
 800343a:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <prvAddCurrentTaskToDelayedList+0x108>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3301      	adds	r3, #1
 8003440:	4a20      	ldr	r2, [pc, #128]	; (80034c4 <prvAddCurrentTaskToDelayedList+0x108>)
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003446:	e032      	b.n	80034ae <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003450:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	429a      	cmp	r2, r3
 800345e:	d20f      	bcs.n	8003480 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003460:	4b16      	ldr	r3, [pc, #88]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2104      	movs	r1, #4
 8003466:	4618      	mov	r0, r3
 8003468:	f002 faea 	bl	8005a40 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800346c:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3304      	adds	r3, #4
 8003476:	4619      	mov	r1, r3
 8003478:	4610      	mov	r0, r2
 800347a:	f7fe fcc0 	bl	8001dfe <vListInsert>
}
 800347e:	e016      	b.n	80034ae <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003480:	4b0e      	ldr	r3, [pc, #56]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2104      	movs	r1, #4
 8003486:	4618      	mov	r0, r3
 8003488:	f002 fada 	bl	8005a40 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800348c:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <prvAddCurrentTaskToDelayedList+0x110>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <prvAddCurrentTaskToDelayedList+0x100>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3304      	adds	r3, #4
 8003496:	4619      	mov	r1, r3
 8003498:	4610      	mov	r0, r2
 800349a:	f7fe fcb0 	bl	8001dfe <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800349e:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <prvAddCurrentTaskToDelayedList+0x114>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d202      	bcs.n	80034ae <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 80034a8:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <prvAddCurrentTaskToDelayedList+0x114>)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6013      	str	r3, [r2, #0]
}
 80034ae:	bf00      	nop
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	2000010c 	.word	0x2000010c
 80034bc:	20000030 	.word	0x20000030
 80034c0:	20000110 	.word	0x20000110
 80034c4:	200000f4 	.word	0x200000f4
 80034c8:	200000c4 	.word	0x200000c4
 80034cc:	200000c0 	.word	0x200000c0
 80034d0:	20000128 	.word	0x20000128

080034d4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80034da:	2300      	movs	r3, #0
 80034dc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80034de:	f000 fa47 	bl	8003970 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80034e2:	4b11      	ldr	r3, [pc, #68]	; (8003528 <xTimerCreateTimerTask+0x54>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00b      	beq.n	8003502 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <xTimerCreateTimerTask+0x58>)
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	2302      	movs	r3, #2
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	2300      	movs	r3, #0
 80034f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034f8:	490d      	ldr	r1, [pc, #52]	; (8003530 <xTimerCreateTimerTask+0x5c>)
 80034fa:	480e      	ldr	r0, [pc, #56]	; (8003534 <xTimerCreateTimerTask+0x60>)
 80034fc:	f7ff f812 	bl	8002524 <xTaskCreate>
 8003500:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10a      	bne.n	800351e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	603b      	str	r3, [r7, #0]
    }
 800351a:	bf00      	nop
 800351c:	e7fe      	b.n	800351c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800351e:	687b      	ldr	r3, [r7, #4]
    }
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20000164 	.word	0x20000164
 800352c:	20000168 	.word	0x20000168
 8003530:	08005ea4 	.word	0x08005ea4
 8003534:	080035dd 	.word	0x080035dd

08003538 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003544:	e008      	b.n	8003558 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	4413      	add	r3, r2
 800354e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	699a      	ldr	r2, [r3, #24]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	18d1      	adds	r1, r2, r3
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f8dd 	bl	8003724 <prvInsertTimerInActiveList>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1ea      	bne.n	8003546 <prvReloadTimer+0xe>
        }
    }
 8003570:	bf00      	nop
 8003572:	bf00      	nop
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003586:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <prvProcessExpiredTimer+0x5c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3304      	adds	r3, #4
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe fc6b 	bl	8001e70 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f7ff ffc3 	bl	8003538 <prvReloadTimer>
 80035b2:	e008      	b.n	80035c6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	4798      	blx	r3
    }
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	2000015c 	.word	0x2000015c

080035dc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035e4:	f107 0308 	add.w	r3, r7, #8
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 f857 	bl	800369c <prvGetNextExpireTime>
 80035ee:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4619      	mov	r1, r3
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f803 	bl	8003600 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80035fa:	f000 f8d5 	bl	80037a8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035fe:	e7f1      	b.n	80035e4 <prvTimerTask+0x8>

08003600 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800360a:	f7ff f987 	bl	800291c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800360e:	f107 0308 	add.w	r3, r7, #8
 8003612:	4618      	mov	r0, r3
 8003614:	f000 f866 	bl	80036e4 <prvSampleTimeNow>
 8003618:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d130      	bne.n	8003682 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10a      	bne.n	800363c <prvProcessTimerOrBlockTask+0x3c>
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	429a      	cmp	r2, r3
 800362c:	d806      	bhi.n	800363c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800362e:	f7ff f983 	bl	8002938 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003632:	68f9      	ldr	r1, [r7, #12]
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff ffa1 	bl	800357c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800363a:	e024      	b.n	8003686 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003642:	4b13      	ldr	r3, [pc, #76]	; (8003690 <prvProcessTimerOrBlockTask+0x90>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <prvProcessTimerOrBlockTask+0x50>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <prvProcessTimerOrBlockTask+0x52>
 8003650:	2300      	movs	r3, #0
 8003652:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003654:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <prvProcessTimerOrBlockTask+0x94>)
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	4619      	mov	r1, r3
 8003662:	f7fe ff2b 	bl	80024bc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003666:	f7ff f967 	bl	8002938 <xTaskResumeAll>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003670:	4b09      	ldr	r3, [pc, #36]	; (8003698 <prvProcessTimerOrBlockTask+0x98>)
 8003672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	f3bf 8f6f 	isb	sy
    }
 8003680:	e001      	b.n	8003686 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003682:	f7ff f959 	bl	8002938 <xTaskResumeAll>
    }
 8003686:	bf00      	nop
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000160 	.word	0x20000160
 8003694:	20000164 	.word	0x20000164
 8003698:	e000ed04 	.word	0xe000ed04

0800369c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <prvGetNextExpireTime+0x44>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <prvGetNextExpireTime+0x16>
 80036ae:	2201      	movs	r2, #1
 80036b0:	e000      	b.n	80036b4 <prvGetNextExpireTime+0x18>
 80036b2:	2200      	movs	r2, #0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80036c0:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <prvGetNextExpireTime+0x44>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	e001      	b.n	80036d0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80036d0:	68fb      	ldr	r3, [r7, #12]
    }
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	2000015c 	.word	0x2000015c

080036e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80036ec:	f7ff fa24 	bl	8002b38 <xTaskGetTickCount>
 80036f0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80036f2:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <prvSampleTimeNow+0x3c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d205      	bcs.n	8003708 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80036fc:	f000 f912 	bl	8003924 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	e002      	b.n	800370e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800370e:	4a04      	ldr	r2, [pc, #16]	; (8003720 <prvSampleTimeNow+0x3c>)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003714:	68fb      	ldr	r3, [r7, #12]
    }
 8003716:	4618      	mov	r0, r3
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	2000016c 	.word	0x2000016c

08003724 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	429a      	cmp	r2, r3
 8003748:	d812      	bhi.n	8003770 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	1ad2      	subs	r2, r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	429a      	cmp	r2, r3
 8003756:	d302      	bcc.n	800375e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003758:	2301      	movs	r3, #1
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e01b      	b.n	8003796 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800375e:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <prvInsertTimerInActiveList+0x7c>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3304      	adds	r3, #4
 8003766:	4619      	mov	r1, r3
 8003768:	4610      	mov	r0, r2
 800376a:	f7fe fb48 	bl	8001dfe <vListInsert>
 800376e:	e012      	b.n	8003796 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d206      	bcs.n	8003786 <prvInsertTimerInActiveList+0x62>
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d302      	bcc.n	8003786 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003780:	2301      	movs	r3, #1
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	e007      	b.n	8003796 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003786:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <prvInsertTimerInActiveList+0x80>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	3304      	adds	r3, #4
 800378e:	4619      	mov	r1, r3
 8003790:	4610      	mov	r0, r2
 8003792:	f7fe fb34 	bl	8001dfe <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003796:	697b      	ldr	r3, [r7, #20]
    }
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20000160 	.word	0x20000160
 80037a4:	2000015c 	.word	0x2000015c

080037a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037ae:	e0a6      	b.n	80038fe <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f2c0 80a2 	blt.w	80038fc <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d004      	beq.n	80037ce <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe fb51 	bl	8001e70 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80037ce:	1d3b      	adds	r3, r7, #4
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff ff87 	bl	80036e4 <prvSampleTimeNow>
 80037d6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	3b01      	subs	r3, #1
 80037dc:	2b08      	cmp	r3, #8
 80037de:	f200 808e 	bhi.w	80038fe <prvProcessReceivedCommands+0x156>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <prvProcessReceivedCommands+0x40>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	0800380d 	.word	0x0800380d
 80037ec:	0800380d 	.word	0x0800380d
 80037f0:	08003875 	.word	0x08003875
 80037f4:	08003889 	.word	0x08003889
 80037f8:	080038d3 	.word	0x080038d3
 80037fc:	0800380d 	.word	0x0800380d
 8003800:	0800380d 	.word	0x0800380d
 8003804:	08003875 	.word	0x08003875
 8003808:	08003889 	.word	0x08003889
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	b2da      	uxtb	r2, r3
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	18d1      	adds	r1, r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	69f8      	ldr	r0, [r7, #28]
 800382c:	f7ff ff7a 	bl	8003724 <prvInsertTimerInActiveList>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d063      	beq.n	80038fe <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d009      	beq.n	8003858 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	4413      	add	r3, r2
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4619      	mov	r1, r3
 8003850:	69f8      	ldr	r0, [r7, #28]
 8003852:	f7ff fe71 	bl	8003538 <prvReloadTimer>
 8003856:	e008      	b.n	800386a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800385e:	f023 0301 	bic.w	r3, r3, #1
 8003862:	b2da      	uxtb	r2, r3
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	69f8      	ldr	r0, [r7, #28]
 8003870:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003872:	e044      	b.n	80038fe <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800387a:	f023 0301 	bic.w	r3, r3, #1
 800387e:	b2da      	uxtb	r2, r3
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003886:	e03a      	b.n	80038fe <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800388e:	f043 0301 	orr.w	r3, r3, #1
 8003892:	b2da      	uxtb	r2, r3
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10a      	bne.n	80038be <prvProcessReceivedCommands+0x116>
        __asm volatile
 80038a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	617b      	str	r3, [r7, #20]
    }
 80038ba:	bf00      	nop
 80038bc:	e7fe      	b.n	80038bc <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	699a      	ldr	r2, [r3, #24]
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	18d1      	adds	r1, r2, r3
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	69f8      	ldr	r0, [r7, #28]
 80038cc:	f7ff ff2a 	bl	8003724 <prvInsertTimerInActiveList>
                        break;
 80038d0:	e015      	b.n	80038fe <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d103      	bne.n	80038e8 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 80038e0:	69f8      	ldr	r0, [r7, #28]
 80038e2:	f000 fc33 	bl	800414c <vPortFree>
 80038e6:	e00a      	b.n	80038fe <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80038fa:	e000      	b.n	80038fe <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80038fc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038fe:	4b08      	ldr	r3, [pc, #32]	; (8003920 <prvProcessReceivedCommands+0x178>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f107 0108 	add.w	r1, r7, #8
 8003906:	2200      	movs	r2, #0
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe fbe3 	bl	80020d4 <xQueueReceive>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	f47f af4d 	bne.w	80037b0 <prvProcessReceivedCommands+0x8>
        }
    }
 8003916:	bf00      	nop
 8003918:	bf00      	nop
 800391a:	3720      	adds	r7, #32
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	20000164 	.word	0x20000164

08003924 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800392a:	e009      	b.n	8003940 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800392c:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <prvSwitchTimerLists+0x44>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003936:	f04f 31ff 	mov.w	r1, #4294967295
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f7ff fe1e 	bl	800357c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003940:	4b09      	ldr	r3, [pc, #36]	; (8003968 <prvSwitchTimerLists+0x44>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800394a:	4b07      	ldr	r3, [pc, #28]	; (8003968 <prvSwitchTimerLists+0x44>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <prvSwitchTimerLists+0x48>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a04      	ldr	r2, [pc, #16]	; (8003968 <prvSwitchTimerLists+0x44>)
 8003956:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003958:	4a04      	ldr	r2, [pc, #16]	; (800396c <prvSwitchTimerLists+0x48>)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6013      	str	r3, [r2, #0]
    }
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	2000015c 	.word	0x2000015c
 800396c:	20000160 	.word	0x20000160

08003970 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003974:	f000 f9de 	bl	8003d34 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003978:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <prvCheckForValidListAndQueue+0x54>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d11d      	bne.n	80039bc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003980:	4811      	ldr	r0, [pc, #68]	; (80039c8 <prvCheckForValidListAndQueue+0x58>)
 8003982:	f7fe fa0f 	bl	8001da4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003986:	4811      	ldr	r0, [pc, #68]	; (80039cc <prvCheckForValidListAndQueue+0x5c>)
 8003988:	f7fe fa0c 	bl	8001da4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800398c:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <prvCheckForValidListAndQueue+0x60>)
 800398e:	4a0e      	ldr	r2, [pc, #56]	; (80039c8 <prvCheckForValidListAndQueue+0x58>)
 8003990:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003992:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <prvCheckForValidListAndQueue+0x64>)
 8003994:	4a0d      	ldr	r2, [pc, #52]	; (80039cc <prvCheckForValidListAndQueue+0x5c>)
 8003996:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003998:	2200      	movs	r2, #0
 800399a:	210c      	movs	r1, #12
 800399c:	200a      	movs	r0, #10
 800399e:	f7fe fb21 	bl	8001fe4 <xQueueGenericCreate>
 80039a2:	4603      	mov	r3, r0
 80039a4:	4a07      	ldr	r2, [pc, #28]	; (80039c4 <prvCheckForValidListAndQueue+0x54>)
 80039a6:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <prvCheckForValidListAndQueue+0x54>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80039b0:	4b04      	ldr	r3, [pc, #16]	; (80039c4 <prvCheckForValidListAndQueue+0x54>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4908      	ldr	r1, [pc, #32]	; (80039d8 <prvCheckForValidListAndQueue+0x68>)
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe fd2a 	bl	8002410 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80039bc:	f000 f9ea 	bl	8003d94 <vPortExitCritical>
    }
 80039c0:	bf00      	nop
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	20000164 	.word	0x20000164
 80039c8:	20000134 	.word	0x20000134
 80039cc:	20000148 	.word	0x20000148
 80039d0:	2000015c 	.word	0x2000015c
 80039d4:	20000160 	.word	0x20000160
 80039d8:	08005eac 	.word	0x08005eac

080039dc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3b04      	subs	r3, #4
 80039ec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	3b04      	subs	r3, #4
 80039fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f023 0201 	bic.w	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	3b04      	subs	r3, #4
 8003a0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003a0c:	4a0c      	ldr	r2, [pc, #48]	; (8003a40 <pxPortInitialiseStack+0x64>)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	3b14      	subs	r3, #20
 8003a16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	3b04      	subs	r3, #4
 8003a22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f06f 0202 	mvn.w	r2, #2
 8003a2a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3b20      	subs	r3, #32
 8003a30:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003a32:	68fb      	ldr	r3, [r7, #12]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	08003a45 	.word	0x08003a45

08003a44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <prvTaskExitError+0x54>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a56:	d00a      	beq.n	8003a6e <prvTaskExitError+0x2a>
        __asm volatile
 8003a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	60fb      	str	r3, [r7, #12]
    }
 8003a6a:	bf00      	nop
 8003a6c:	e7fe      	b.n	8003a6c <prvTaskExitError+0x28>
        __asm volatile
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	60bb      	str	r3, [r7, #8]
    }
 8003a80:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003a82:	bf00      	nop
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0fc      	beq.n	8003a84 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003a8a:	bf00      	nop
 8003a8c:	bf00      	nop
 8003a8e:	3714      	adds	r7, #20
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	20000010 	.word	0x20000010
 8003a9c:	00000000 	.word	0x00000000

08003aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003aa0:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <pxCurrentTCBConst2>)
 8003aa2:	6819      	ldr	r1, [r3, #0]
 8003aa4:	6808      	ldr	r0, [r1, #0]
 8003aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aaa:	f380 8809 	msr	PSP, r0
 8003aae:	f3bf 8f6f 	isb	sy
 8003ab2:	f04f 0000 	mov.w	r0, #0
 8003ab6:	f380 8811 	msr	BASEPRI, r0
 8003aba:	4770      	bx	lr
 8003abc:	f3af 8000 	nop.w

08003ac0 <pxCurrentTCBConst2>:
 8003ac0:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003ac4:	bf00      	nop
 8003ac6:	bf00      	nop

08003ac8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003ac8:	4808      	ldr	r0, [pc, #32]	; (8003aec <prvPortStartFirstTask+0x24>)
 8003aca:	6800      	ldr	r0, [r0, #0]
 8003acc:	6800      	ldr	r0, [r0, #0]
 8003ace:	f380 8808 	msr	MSP, r0
 8003ad2:	f04f 0000 	mov.w	r0, #0
 8003ad6:	f380 8814 	msr	CONTROL, r0
 8003ada:	b662      	cpsie	i
 8003adc:	b661      	cpsie	f
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	df00      	svc	0
 8003ae8:	bf00      	nop
 8003aea:	0000      	.short	0x0000
 8003aec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003af0:	bf00      	nop
 8003af2:	bf00      	nop

08003af4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b086      	sub	sp, #24
 8003af8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003afa:	4b46      	ldr	r3, [pc, #280]	; (8003c14 <xPortStartScheduler+0x120>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a46      	ldr	r2, [pc, #280]	; (8003c18 <xPortStartScheduler+0x124>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d10a      	bne.n	8003b1a <xPortStartScheduler+0x26>
        __asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	613b      	str	r3, [r7, #16]
    }
 8003b16:	bf00      	nop
 8003b18:	e7fe      	b.n	8003b18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b1a:	4b3e      	ldr	r3, [pc, #248]	; (8003c14 <xPortStartScheduler+0x120>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a3f      	ldr	r2, [pc, #252]	; (8003c1c <xPortStartScheduler+0x128>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d10a      	bne.n	8003b3a <xPortStartScheduler+0x46>
        __asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	60fb      	str	r3, [r7, #12]
    }
 8003b36:	bf00      	nop
 8003b38:	e7fe      	b.n	8003b38 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b3a:	4b39      	ldr	r3, [pc, #228]	; (8003c20 <xPortStartScheduler+0x12c>)
 8003b3c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	22ff      	movs	r2, #255	; 0xff
 8003b4a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <xPortStartScheduler+0x130>)
 8003b60:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b62:	4b31      	ldr	r3, [pc, #196]	; (8003c28 <xPortStartScheduler+0x134>)
 8003b64:	2207      	movs	r2, #7
 8003b66:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b68:	e009      	b.n	8003b7e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003b6a:	4b2f      	ldr	r3, [pc, #188]	; (8003c28 <xPortStartScheduler+0x134>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	4a2d      	ldr	r2, [pc, #180]	; (8003c28 <xPortStartScheduler+0x134>)
 8003b72:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b86:	2b80      	cmp	r3, #128	; 0x80
 8003b88:	d0ef      	beq.n	8003b6a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b8a:	4b27      	ldr	r3, [pc, #156]	; (8003c28 <xPortStartScheduler+0x134>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f1c3 0307 	rsb	r3, r3, #7
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d00a      	beq.n	8003bac <xPortStartScheduler+0xb8>
        __asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	60bb      	str	r3, [r7, #8]
    }
 8003ba8:	bf00      	nop
 8003baa:	e7fe      	b.n	8003baa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bac:	4b1e      	ldr	r3, [pc, #120]	; (8003c28 <xPortStartScheduler+0x134>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <xPortStartScheduler+0x134>)
 8003bb4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bb6:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <xPortStartScheduler+0x134>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bbe:	4a1a      	ldr	r2, [pc, #104]	; (8003c28 <xPortStartScheduler+0x134>)
 8003bc0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003bca:	4b18      	ldr	r3, [pc, #96]	; (8003c2c <xPortStartScheduler+0x138>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <xPortStartScheduler+0x138>)
 8003bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bd4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003bd6:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <xPortStartScheduler+0x138>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a14      	ldr	r2, [pc, #80]	; (8003c2c <xPortStartScheduler+0x138>)
 8003bdc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003be0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003be2:	f000 f963 	bl	8003eac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003be6:	4b12      	ldr	r3, [pc, #72]	; (8003c30 <xPortStartScheduler+0x13c>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003bec:	f000 f982 	bl	8003ef4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003bf0:	4b10      	ldr	r3, [pc, #64]	; (8003c34 <xPortStartScheduler+0x140>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a0f      	ldr	r2, [pc, #60]	; (8003c34 <xPortStartScheduler+0x140>)
 8003bf6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003bfa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003bfc:	f7ff ff64 	bl	8003ac8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003c00:	f7ff f8d6 	bl	8002db0 <vTaskSwitchContext>
    prvTaskExitError();
 8003c04:	f7ff ff1e 	bl	8003a44 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	e000ed00 	.word	0xe000ed00
 8003c18:	410fc271 	.word	0x410fc271
 8003c1c:	410fc270 	.word	0x410fc270
 8003c20:	e000e400 	.word	0xe000e400
 8003c24:	20000170 	.word	0x20000170
 8003c28:	20000174 	.word	0x20000174
 8003c2c:	e000ed20 	.word	0xe000ed20
 8003c30:	20000010 	.word	0x20000010
 8003c34:	e000ef34 	.word	0xe000ef34

08003c38 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c3e:	4b37      	ldr	r3, [pc, #220]	; (8003d1c <vInitPrioGroupValue+0xe4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a37      	ldr	r2, [pc, #220]	; (8003d20 <vInitPrioGroupValue+0xe8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d10a      	bne.n	8003c5e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	613b      	str	r3, [r7, #16]
    }
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c5e:	4b2f      	ldr	r3, [pc, #188]	; (8003d1c <vInitPrioGroupValue+0xe4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a30      	ldr	r2, [pc, #192]	; (8003d24 <vInitPrioGroupValue+0xec>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d10a      	bne.n	8003c7e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6c:	f383 8811 	msr	BASEPRI, r3
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	60fb      	str	r3, [r7, #12]
    }
 8003c7a:	bf00      	nop
 8003c7c:	e7fe      	b.n	8003c7c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c7e:	4b2a      	ldr	r3, [pc, #168]	; (8003d28 <vInitPrioGroupValue+0xf0>)
 8003c80:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	22ff      	movs	r2, #255	; 0xff
 8003c8e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	4b22      	ldr	r3, [pc, #136]	; (8003d2c <vInitPrioGroupValue+0xf4>)
 8003ca4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ca6:	4b22      	ldr	r3, [pc, #136]	; (8003d30 <vInitPrioGroupValue+0xf8>)
 8003ca8:	2207      	movs	r2, #7
 8003caa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cac:	e009      	b.n	8003cc2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003cae:	4b20      	ldr	r3, [pc, #128]	; (8003d30 <vInitPrioGroupValue+0xf8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	4a1e      	ldr	r2, [pc, #120]	; (8003d30 <vInitPrioGroupValue+0xf8>)
 8003cb6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cca:	2b80      	cmp	r3, #128	; 0x80
 8003ccc:	d0ef      	beq.n	8003cae <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cce:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <vInitPrioGroupValue+0xf8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f1c3 0307 	rsb	r3, r3, #7
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d00a      	beq.n	8003cf0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8003cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	60bb      	str	r3, [r7, #8]
    }
 8003cec:	bf00      	nop
 8003cee:	e7fe      	b.n	8003cee <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <vInitPrioGroupValue+0xf8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	4a0e      	ldr	r2, [pc, #56]	; (8003d30 <vInitPrioGroupValue+0xf8>)
 8003cf8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <vInitPrioGroupValue+0xf8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d02:	4a0b      	ldr	r2, [pc, #44]	; (8003d30 <vInitPrioGroupValue+0xf8>)
 8003d04:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	e000ed00 	.word	0xe000ed00
 8003d20:	410fc271 	.word	0x410fc271
 8003d24:	410fc270 	.word	0x410fc270
 8003d28:	e000e400 	.word	0xe000e400
 8003d2c:	20000170 	.word	0x20000170
 8003d30:	20000174 	.word	0x20000174

08003d34 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
        __asm volatile
 8003d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	607b      	str	r3, [r7, #4]
    }
 8003d4c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003d4e:	4b0f      	ldr	r3, [pc, #60]	; (8003d8c <vPortEnterCritical+0x58>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3301      	adds	r3, #1
 8003d54:	4a0d      	ldr	r2, [pc, #52]	; (8003d8c <vPortEnterCritical+0x58>)
 8003d56:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <vPortEnterCritical+0x58>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d10f      	bne.n	8003d80 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <vPortEnterCritical+0x5c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <vPortEnterCritical+0x4c>
        __asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	603b      	str	r3, [r7, #0]
    }
 8003d7c:	bf00      	nop
 8003d7e:	e7fe      	b.n	8003d7e <vPortEnterCritical+0x4a>
    }
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	20000010 	.word	0x20000010
 8003d90:	e000ed04 	.word	0xe000ed04

08003d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003d9a:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <vPortExitCritical+0x50>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <vPortExitCritical+0x24>
        __asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	607b      	str	r3, [r7, #4]
    }
 8003db4:	bf00      	nop
 8003db6:	e7fe      	b.n	8003db6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <vPortExitCritical+0x50>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <vPortExitCritical+0x50>)
 8003dc0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003dc2:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <vPortExitCritical+0x50>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d105      	bne.n	8003dd6 <vPortExitCritical+0x42>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003dd4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000010 	.word	0x20000010
	...

08003df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003df0:	f3ef 8009 	mrs	r0, PSP
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <pxCurrentTCBConst>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	f01e 0f10 	tst.w	lr, #16
 8003e00:	bf08      	it	eq
 8003e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0a:	6010      	str	r0, [r2, #0]
 8003e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e14:	f380 8811 	msr	BASEPRI, r0
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f7fe ffc6 	bl	8002db0 <vTaskSwitchContext>
 8003e24:	f04f 0000 	mov.w	r0, #0
 8003e28:	f380 8811 	msr	BASEPRI, r0
 8003e2c:	bc09      	pop	{r0, r3}
 8003e2e:	6819      	ldr	r1, [r3, #0]
 8003e30:	6808      	ldr	r0, [r1, #0]
 8003e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e36:	f01e 0f10 	tst.w	lr, #16
 8003e3a:	bf08      	it	eq
 8003e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e40:	f380 8809 	msr	PSP, r0
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	f3af 8000 	nop.w

08003e50 <pxCurrentTCBConst>:
 8003e50:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop

08003e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	607b      	str	r3, [r7, #4]
    }
 8003e70:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003e72:	f001 fc89 	bl	8005788 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003e76:	f7fe fe81 	bl	8002b7c <xTaskIncrementTick>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d006      	beq.n	8003e8e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003e80:	f001 fce0 	bl	8005844 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e84:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <SysTick_Handler+0x50>)
 8003e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e001      	b.n	8003e92 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003e8e:	f001 fcbd 	bl	800580c <SEGGER_SYSVIEW_RecordExitISR>
 8003e92:	2300      	movs	r3, #0
 8003e94:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	f383 8811 	msr	BASEPRI, r3
    }
 8003e9c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	e000ed04 	.word	0xe000ed04

08003eac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <vPortSetupTimerInterrupt+0x34>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ee4 <vPortSetupTimerInterrupt+0x38>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <vPortSetupTimerInterrupt+0x3c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a0a      	ldr	r2, [pc, #40]	; (8003eec <vPortSetupTimerInterrupt+0x40>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	099b      	lsrs	r3, r3, #6
 8003ec8:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <vPortSetupTimerInterrupt+0x44>)
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ece:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <vPortSetupTimerInterrupt+0x34>)
 8003ed0:	2207      	movs	r2, #7
 8003ed2:	601a      	str	r2, [r3, #0]
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	e000e010 	.word	0xe000e010
 8003ee4:	e000e018 	.word	0xe000e018
 8003ee8:	20000000 	.word	0x20000000
 8003eec:	10624dd3 	.word	0x10624dd3
 8003ef0:	e000e014 	.word	0xe000e014

08003ef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003ef4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003f04 <vPortEnableVFP+0x10>
 8003ef8:	6801      	ldr	r1, [r0, #0]
 8003efa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003efe:	6001      	str	r1, [r0, #0]
 8003f00:	4770      	bx	lr
 8003f02:	0000      	.short	0x0000
 8003f04:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003f08:	bf00      	nop
 8003f0a:	bf00      	nop

08003f0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003f12:	f3ef 8305 	mrs	r3, IPSR
 8003f16:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b0f      	cmp	r3, #15
 8003f1c:	d914      	bls.n	8003f48 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003f1e:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <vPortValidateInterruptPriority+0x70>)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003f28:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <vPortValidateInterruptPriority+0x74>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	7afa      	ldrb	r2, [r7, #11]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d20a      	bcs.n	8003f48 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	607b      	str	r3, [r7, #4]
    }
 8003f44:	bf00      	nop
 8003f46:	e7fe      	b.n	8003f46 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003f48:	4b0e      	ldr	r3, [pc, #56]	; (8003f84 <vPortValidateInterruptPriority+0x78>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f50:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <vPortValidateInterruptPriority+0x7c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d90a      	bls.n	8003f6e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	603b      	str	r3, [r7, #0]
    }
 8003f6a:	bf00      	nop
 8003f6c:	e7fe      	b.n	8003f6c <vPortValidateInterruptPriority+0x60>
    }
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	e000e3f0 	.word	0xe000e3f0
 8003f80:	20000170 	.word	0x20000170
 8003f84:	e000ed0c 	.word	0xe000ed0c
 8003f88:	20000174 	.word	0x20000174

08003f8c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003f98:	f7fe fcc0 	bl	800291c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003f9c:	4b65      	ldr	r3, [pc, #404]	; (8004134 <pvPortMalloc+0x1a8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003fa4:	f000 f934 	bl	8004210 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003fa8:	4b63      	ldr	r3, [pc, #396]	; (8004138 <pvPortMalloc+0x1ac>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f040 80a7 	bne.w	8004104 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d02d      	beq.n	8004018 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003fbc:	2208      	movs	r2, #8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d227      	bcs.n	8004018 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003fc8:	2208      	movs	r2, #8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4413      	add	r3, r2
 8003fce:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d021      	beq.n	800401e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f023 0307 	bic.w	r3, r3, #7
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d214      	bcs.n	8004012 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f023 0307 	bic.w	r3, r3, #7
 8003fee:	3308      	adds	r3, #8
 8003ff0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d010      	beq.n	800401e <pvPortMalloc+0x92>
        __asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	617b      	str	r3, [r7, #20]
    }
 800400e:	bf00      	nop
 8004010:	e7fe      	b.n	8004010 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004016:	e002      	b.n	800401e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	607b      	str	r3, [r7, #4]
 800401c:	e000      	b.n	8004020 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800401e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d06e      	beq.n	8004104 <pvPortMalloc+0x178>
 8004026:	4b45      	ldr	r3, [pc, #276]	; (800413c <pvPortMalloc+0x1b0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	d869      	bhi.n	8004104 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004030:	4b43      	ldr	r3, [pc, #268]	; (8004140 <pvPortMalloc+0x1b4>)
 8004032:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004034:	4b42      	ldr	r3, [pc, #264]	; (8004140 <pvPortMalloc+0x1b4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800403a:	e004      	b.n	8004046 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	429a      	cmp	r2, r3
 800404e:	d903      	bls.n	8004058 <pvPortMalloc+0xcc>
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f1      	bne.n	800403c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004058:	4b36      	ldr	r3, [pc, #216]	; (8004134 <pvPortMalloc+0x1a8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405e:	429a      	cmp	r2, r3
 8004060:	d050      	beq.n	8004104 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2208      	movs	r2, #8
 8004068:	4413      	add	r3, r2
 800406a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	1ad2      	subs	r2, r2, r3
 800407c:	2308      	movs	r3, #8
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	429a      	cmp	r2, r3
 8004082:	d91f      	bls.n	80040c4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <pvPortMalloc+0x120>
        __asm volatile
 8004096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409a:	f383 8811 	msr	BASEPRI, r3
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f3bf 8f4f 	dsb	sy
 80040a6:	613b      	str	r3, [r7, #16]
    }
 80040a8:	bf00      	nop
 80040aa:	e7fe      	b.n	80040aa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	1ad2      	subs	r2, r2, r3
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80040be:	69b8      	ldr	r0, [r7, #24]
 80040c0:	f000 f908 	bl	80042d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040c4:	4b1d      	ldr	r3, [pc, #116]	; (800413c <pvPortMalloc+0x1b0>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	4a1b      	ldr	r2, [pc, #108]	; (800413c <pvPortMalloc+0x1b0>)
 80040d0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040d2:	4b1a      	ldr	r3, [pc, #104]	; (800413c <pvPortMalloc+0x1b0>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <pvPortMalloc+0x1b8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d203      	bcs.n	80040e6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80040de:	4b17      	ldr	r3, [pc, #92]	; (800413c <pvPortMalloc+0x1b0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a18      	ldr	r2, [pc, #96]	; (8004144 <pvPortMalloc+0x1b8>)
 80040e4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	4b13      	ldr	r3, [pc, #76]	; (8004138 <pvPortMalloc+0x1ac>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80040fa:	4b13      	ldr	r3, [pc, #76]	; (8004148 <pvPortMalloc+0x1bc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3301      	adds	r3, #1
 8004100:	4a11      	ldr	r2, [pc, #68]	; (8004148 <pvPortMalloc+0x1bc>)
 8004102:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004104:	f7fe fc18 	bl	8002938 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <pvPortMalloc+0x19c>
        __asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	60fb      	str	r3, [r7, #12]
    }
 8004124:	bf00      	nop
 8004126:	e7fe      	b.n	8004126 <pvPortMalloc+0x19a>
    return pvReturn;
 8004128:	69fb      	ldr	r3, [r7, #28]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3728      	adds	r7, #40	; 0x28
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20012d80 	.word	0x20012d80
 8004138:	20012d94 	.word	0x20012d94
 800413c:	20012d84 	.word	0x20012d84
 8004140:	20012d78 	.word	0x20012d78
 8004144:	20012d88 	.word	0x20012d88
 8004148:	20012d8c 	.word	0x20012d8c

0800414c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d04d      	beq.n	80041fa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800415e:	2308      	movs	r3, #8
 8004160:	425b      	negs	r3, r3
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4413      	add	r3, r2
 8004166:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	4b24      	ldr	r3, [pc, #144]	; (8004204 <vPortFree+0xb8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4013      	ands	r3, r2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10a      	bne.n	8004190 <vPortFree+0x44>
        __asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	60fb      	str	r3, [r7, #12]
    }
 800418c:	bf00      	nop
 800418e:	e7fe      	b.n	800418e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <vPortFree+0x62>
        __asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	60bb      	str	r3, [r7, #8]
    }
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	4b14      	ldr	r3, [pc, #80]	; (8004204 <vPortFree+0xb8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d01e      	beq.n	80041fa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d11a      	bne.n	80041fa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <vPortFree+0xb8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	401a      	ands	r2, r3
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80041d4:	f7fe fba2 	bl	800291c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <vPortFree+0xbc>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4413      	add	r3, r2
 80041e2:	4a09      	ldr	r2, [pc, #36]	; (8004208 <vPortFree+0xbc>)
 80041e4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80041e6:	6938      	ldr	r0, [r7, #16]
 80041e8:	f000 f874 	bl	80042d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80041ec:	4b07      	ldr	r3, [pc, #28]	; (800420c <vPortFree+0xc0>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3301      	adds	r3, #1
 80041f2:	4a06      	ldr	r2, [pc, #24]	; (800420c <vPortFree+0xc0>)
 80041f4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80041f6:	f7fe fb9f 	bl	8002938 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80041fa:	bf00      	nop
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20012d94 	.word	0x20012d94
 8004208:	20012d84 	.word	0x20012d84
 800420c:	20012d90 	.word	0x20012d90

08004210 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004216:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800421a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800421c:	4b27      	ldr	r3, [pc, #156]	; (80042bc <prvHeapInit+0xac>)
 800421e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00c      	beq.n	8004244 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	3307      	adds	r3, #7
 800422e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0307 	bic.w	r3, r3, #7
 8004236:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	4a1f      	ldr	r2, [pc, #124]	; (80042bc <prvHeapInit+0xac>)
 8004240:	4413      	add	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004248:	4a1d      	ldr	r2, [pc, #116]	; (80042c0 <prvHeapInit+0xb0>)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800424e:	4b1c      	ldr	r3, [pc, #112]	; (80042c0 <prvHeapInit+0xb0>)
 8004250:	2200      	movs	r2, #0
 8004252:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	4413      	add	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800425c:	2208      	movs	r2, #8
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0307 	bic.w	r3, r3, #7
 800426a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a15      	ldr	r2, [pc, #84]	; (80042c4 <prvHeapInit+0xb4>)
 8004270:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004272:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <prvHeapInit+0xb4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2200      	movs	r2, #0
 8004278:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800427a:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <prvHeapInit+0xb4>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	1ad2      	subs	r2, r2, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004290:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <prvHeapInit+0xb4>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4a0a      	ldr	r2, [pc, #40]	; (80042c8 <prvHeapInit+0xb8>)
 800429e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	4a09      	ldr	r2, [pc, #36]	; (80042cc <prvHeapInit+0xbc>)
 80042a6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80042a8:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <prvHeapInit+0xc0>)
 80042aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80042ae:	601a      	str	r2, [r3, #0]
}
 80042b0:	bf00      	nop
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	20000178 	.word	0x20000178
 80042c0:	20012d78 	.word	0x20012d78
 80042c4:	20012d80 	.word	0x20012d80
 80042c8:	20012d88 	.word	0x20012d88
 80042cc:	20012d84 	.word	0x20012d84
 80042d0:	20012d94 	.word	0x20012d94

080042d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80042dc:	4b28      	ldr	r3, [pc, #160]	; (8004380 <prvInsertBlockIntoFreeList+0xac>)
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	e002      	b.n	80042e8 <prvInsertBlockIntoFreeList+0x14>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d8f7      	bhi.n	80042e2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	4413      	add	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	429a      	cmp	r2, r3
 8004302:	d108      	bne.n	8004316 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	441a      	add	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	441a      	add	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d118      	bne.n	800435c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	4b15      	ldr	r3, [pc, #84]	; (8004384 <prvInsertBlockIntoFreeList+0xb0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d00d      	beq.n	8004352 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	441a      	add	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	e008      	b.n	8004364 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004352:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <prvInsertBlockIntoFreeList+0xb0>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	e003      	b.n	8004364 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	429a      	cmp	r2, r3
 800436a:	d002      	beq.n	8004372 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004372:	bf00      	nop
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20012d78 	.word	0x20012d78
 8004384:	20012d80 	.word	0x20012d80

08004388 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800438c:	4803      	ldr	r0, [pc, #12]	; (800439c <_cbSendSystemDesc+0x14>)
 800438e:	f001 f9a5 	bl	80056dc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004392:	4803      	ldr	r0, [pc, #12]	; (80043a0 <_cbSendSystemDesc+0x18>)
 8004394:	f001 f9a2 	bl	80056dc <SEGGER_SYSVIEW_SendSysDesc>
}
 8004398:	bf00      	nop
 800439a:	bd80      	pop	{r7, pc}
 800439c:	08005eb4 	.word	0x08005eb4
 80043a0:	08005ef0 	.word	0x08005ef0

080043a4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <SEGGER_SYSVIEW_Conf+0x20>)
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <SEGGER_SYSVIEW_Conf+0x20>)
 80043ae:	6819      	ldr	r1, [r3, #0]
 80043b0:	4b05      	ldr	r3, [pc, #20]	; (80043c8 <SEGGER_SYSVIEW_Conf+0x24>)
 80043b2:	4a06      	ldr	r2, [pc, #24]	; (80043cc <SEGGER_SYSVIEW_Conf+0x28>)
 80043b4:	f000 fd10 	bl	8004dd8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80043b8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80043bc:	f000 fd50 	bl	8004e60 <SEGGER_SYSVIEW_SetRAMBase>
}
 80043c0:	bf00      	nop
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20000000 	.word	0x20000000
 80043c8:	08004389 	.word	0x08004389
 80043cc:	08005f90 	.word	0x08005f90

080043d0 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80043d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80043d6:	2300      	movs	r3, #0
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	e033      	b.n	8004444 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80043dc:	491e      	ldr	r1, [pc, #120]	; (8004458 <_cbSendTaskList+0x88>)
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	491a      	ldr	r1, [pc, #104]	; (8004458 <_cbSendTaskList+0x88>)
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	3304      	adds	r3, #4
 80043fc:	6819      	ldr	r1, [r3, #0]
 80043fe:	4c16      	ldr	r4, [pc, #88]	; (8004458 <_cbSendTaskList+0x88>)
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4423      	add	r3, r4
 800440c:	3308      	adds	r3, #8
 800440e:	681c      	ldr	r4, [r3, #0]
 8004410:	4d11      	ldr	r5, [pc, #68]	; (8004458 <_cbSendTaskList+0x88>)
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	442b      	add	r3, r5
 800441e:	330c      	adds	r3, #12
 8004420:	681d      	ldr	r5, [r3, #0]
 8004422:	4e0d      	ldr	r6, [pc, #52]	; (8004458 <_cbSendTaskList+0x88>)
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4433      	add	r3, r6
 8004430:	3310      	adds	r3, #16
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	462b      	mov	r3, r5
 8004438:	4622      	mov	r2, r4
 800443a:	f000 f8b5 	bl	80045a8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3301      	adds	r3, #1
 8004442:	607b      	str	r3, [r7, #4]
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <_cbSendTaskList+0x8c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	429a      	cmp	r2, r3
 800444c:	d3c6      	bcc.n	80043dc <_cbSendTaskList+0xc>
  }
}
 800444e:	bf00      	nop
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004458:	20012d98 	.word	0x20012d98
 800445c:	20012e38 	.word	0x20012e38

08004460 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004460:	b5b0      	push	{r4, r5, r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004466:	f7fe fb77 	bl	8002b58 <xTaskGetTickCountFromISR>
 800446a:	4603      	mov	r3, r0
 800446c:	461a      	mov	r2, r3
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004476:	e9d7 0100 	ldrd	r0, r1, [r7]
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	f04f 0400 	mov.w	r4, #0
 8004482:	f04f 0500 	mov.w	r5, #0
 8004486:	015d      	lsls	r5, r3, #5
 8004488:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 800448c:	0154      	lsls	r4, r2, #5
 800448e:	4622      	mov	r2, r4
 8004490:	462b      	mov	r3, r5
 8004492:	1a12      	subs	r2, r2, r0
 8004494:	eb63 0301 	sbc.w	r3, r3, r1
 8004498:	f04f 0400 	mov.w	r4, #0
 800449c:	f04f 0500 	mov.w	r5, #0
 80044a0:	009d      	lsls	r5, r3, #2
 80044a2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80044a6:	0094      	lsls	r4, r2, #2
 80044a8:	4622      	mov	r2, r4
 80044aa:	462b      	mov	r3, r5
 80044ac:	1812      	adds	r2, r2, r0
 80044ae:	eb41 0303 	adc.w	r3, r1, r3
 80044b2:	f04f 0000 	mov.w	r0, #0
 80044b6:	f04f 0100 	mov.w	r1, #0
 80044ba:	00d9      	lsls	r1, r3, #3
 80044bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044c0:	00d0      	lsls	r0, r2, #3
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80044ca:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80044ce:	4610      	mov	r0, r2
 80044d0:	4619      	mov	r1, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bdb0      	pop	{r4, r5, r7, pc}

080044d8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80044e6:	2205      	movs	r2, #5
 80044e8:	492b      	ldr	r1, [pc, #172]	; (8004598 <SYSVIEW_AddTask+0xc0>)
 80044ea:	68b8      	ldr	r0, [r7, #8]
 80044ec:	f001 fc74 	bl	8005dd8 <memcmp>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d04b      	beq.n	800458e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80044f6:	4b29      	ldr	r3, [pc, #164]	; (800459c <SYSVIEW_AddTask+0xc4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b07      	cmp	r3, #7
 80044fc:	d903      	bls.n	8004506 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80044fe:	4828      	ldr	r0, [pc, #160]	; (80045a0 <SYSVIEW_AddTask+0xc8>)
 8004500:	f001 fbea 	bl	8005cd8 <SEGGER_SYSVIEW_Warn>
    return;
 8004504:	e044      	b.n	8004590 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004506:	4b25      	ldr	r3, [pc, #148]	; (800459c <SYSVIEW_AddTask+0xc4>)
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	4926      	ldr	r1, [pc, #152]	; (80045a4 <SYSVIEW_AddTask+0xcc>)
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800451a:	4b20      	ldr	r3, [pc, #128]	; (800459c <SYSVIEW_AddTask+0xc4>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4921      	ldr	r1, [pc, #132]	; (80045a4 <SYSVIEW_AddTask+0xcc>)
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	3304      	adds	r3, #4
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004530:	4b1a      	ldr	r3, [pc, #104]	; (800459c <SYSVIEW_AddTask+0xc4>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	491b      	ldr	r1, [pc, #108]	; (80045a4 <SYSVIEW_AddTask+0xcc>)
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	3308      	adds	r3, #8
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004546:	4b15      	ldr	r3, [pc, #84]	; (800459c <SYSVIEW_AddTask+0xc4>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	4916      	ldr	r1, [pc, #88]	; (80045a4 <SYSVIEW_AddTask+0xcc>)
 800454c:	4613      	mov	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	330c      	adds	r3, #12
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800455c:	4b0f      	ldr	r3, [pc, #60]	; (800459c <SYSVIEW_AddTask+0xc4>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4910      	ldr	r1, [pc, #64]	; (80045a4 <SYSVIEW_AddTask+0xcc>)
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	3310      	adds	r3, #16
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004572:	4b0a      	ldr	r3, [pc, #40]	; (800459c <SYSVIEW_AddTask+0xc4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3301      	adds	r3, #1
 8004578:	4a08      	ldr	r2, [pc, #32]	; (800459c <SYSVIEW_AddTask+0xc4>)
 800457a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	68b9      	ldr	r1, [r7, #8]
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f80e 	bl	80045a8 <SYSVIEW_SendTaskInfo>
 800458c:	e000      	b.n	8004590 <SYSVIEW_AddTask+0xb8>
    return;
 800458e:	bf00      	nop

}
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	08005f00 	.word	0x08005f00
 800459c:	20012e38 	.word	0x20012e38
 80045a0:	08005f08 	.word	0x08005f08
 80045a4:	20012d98 	.word	0x20012d98

080045a8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	; 0x28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80045b6:	f107 0314 	add.w	r3, r7, #20
 80045ba:	2214      	movs	r2, #20
 80045bc:	2100      	movs	r1, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f001 fc26 	bl	8005e10 <memset>
  TaskInfo.TaskID     = TaskID;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80045d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80045d8:	f107 0314 	add.w	r3, r7, #20
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 ff85 	bl	80054ec <SEGGER_SYSVIEW_SendTaskInfo>
}
 80045e2:	bf00      	nop
 80045e4:	3728      	adds	r7, #40	; 0x28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80045f2:	4b24      	ldr	r3, [pc, #144]	; (8004684 <_DoInit+0x98>)
 80045f4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2203      	movs	r2, #3
 80045fa:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2203      	movs	r2, #3
 8004600:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a20      	ldr	r2, [pc, #128]	; (8004688 <_DoInit+0x9c>)
 8004606:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a20      	ldr	r2, [pc, #128]	; (800468c <_DoInit+0xa0>)
 800460c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004614:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a17      	ldr	r2, [pc, #92]	; (8004688 <_DoInit+0x9c>)
 800462c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a17      	ldr	r2, [pc, #92]	; (8004690 <_DoInit+0xa4>)
 8004632:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2210      	movs	r2, #16
 8004638:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3307      	adds	r3, #7
 8004650:	4a10      	ldr	r2, [pc, #64]	; (8004694 <_DoInit+0xa8>)
 8004652:	6810      	ldr	r0, [r2, #0]
 8004654:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004656:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a0e      	ldr	r2, [pc, #56]	; (8004698 <_DoInit+0xac>)
 800465e:	6810      	ldr	r0, [r2, #0]
 8004660:	6018      	str	r0, [r3, #0]
 8004662:	8891      	ldrh	r1, [r2, #4]
 8004664:	7992      	ldrb	r2, [r2, #6]
 8004666:	8099      	strh	r1, [r3, #4]
 8004668:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800466a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004674:	f3bf 8f5f 	dmb	sy
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	200143f4 	.word	0x200143f4
 8004688:	08005f58 	.word	0x08005f58
 800468c:	20012e3c 	.word	0x20012e3c
 8004690:	2001323c 	.word	0x2001323c
 8004694:	08005f64 	.word	0x08005f64
 8004698:	08005f68 	.word	0x08005f68

0800469c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800469c:	b580      	push	{r7, lr}
 800469e:	b08c      	sub	sp, #48	; 0x30
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80046a8:	4b3e      	ldr	r3, [pc, #248]	; (80047a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80046aa:	623b      	str	r3, [r7, #32]
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <SEGGER_RTT_ReadNoLock+0x1e>
 80046b6:	f7ff ff99 	bl	80045ec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4613      	mov	r3, r2
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4413      	add	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	3360      	adds	r3, #96	; 0x60
 80046c6:	4a37      	ldr	r2, [pc, #220]	; (80047a4 <SEGGER_RTT_ReadNoLock+0x108>)
 80046c8:	4413      	add	r3, r2
 80046ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80046dc:	2300      	movs	r3, #0
 80046de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80046e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d92b      	bls.n	8004740 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4293      	cmp	r3, r2
 80046f8:	bf28      	it	cs
 80046fa:	4613      	movcs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	4413      	add	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	6939      	ldr	r1, [r7, #16]
 800470c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800470e:	f001 fb71 	bl	8005df4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	4413      	add	r3, r2
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800471a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4413      	add	r3, r2
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800472a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	4413      	add	r3, r2
 8004730:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004738:	429a      	cmp	r2, r3
 800473a:	d101      	bne.n	8004740 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800473c:	2300      	movs	r3, #0
 800473e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4293      	cmp	r3, r2
 800474e:	bf28      	it	cs
 8004750:	4613      	movcs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d019      	beq.n	800478e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	4413      	add	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	6939      	ldr	r1, [r7, #16]
 8004768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800476a:	f001 fb43 	bl	8005df4 <memcpy>
    NumBytesRead += NumBytesRem;
 800476e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	4413      	add	r3, r2
 8004774:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4413      	add	r3, r2
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	4413      	add	r3, r2
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004798:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800479c:	4618      	mov	r0, r3
 800479e:	3730      	adds	r7, #48	; 0x30
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	200143f4 	.word	0x200143f4

080047a8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80047b6:	4b3d      	ldr	r3, [pc, #244]	; (80048ac <SEGGER_RTT_AllocUpBuffer+0x104>)
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80047c4:	f7ff ff12 	bl	80045ec <_DoInit>
  SEGGER_RTT_LOCK();
 80047c8:	f3ef 8311 	mrs	r3, BASEPRI
 80047cc:	f04f 0120 	mov.w	r1, #32
 80047d0:	f381 8811 	msr	BASEPRI, r1
 80047d4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80047d6:	4b35      	ldr	r3, [pc, #212]	; (80048ac <SEGGER_RTT_AllocUpBuffer+0x104>)
 80047d8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80047da:	2300      	movs	r3, #0
 80047dc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80047de:	6939      	ldr	r1, [r7, #16]
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	4613      	mov	r3, r2
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	4413      	add	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	440b      	add	r3, r1
 80047ee:	3304      	adds	r3, #4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d008      	beq.n	8004808 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	3301      	adds	r3, #1
 80047fa:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	429a      	cmp	r2, r3
 8004804:	dbeb      	blt.n	80047de <SEGGER_RTT_AllocUpBuffer+0x36>
 8004806:	e000      	b.n	800480a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004808:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	69fa      	ldr	r2, [r7, #28]
 8004810:	429a      	cmp	r2, r3
 8004812:	da3f      	bge.n	8004894 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004814:	6939      	ldr	r1, [r7, #16]
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	4613      	mov	r3, r2
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	4413      	add	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	440b      	add	r3, r1
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004828:	6939      	ldr	r1, [r7, #16]
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	4613      	mov	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	440b      	add	r3, r1
 8004838:	3304      	adds	r3, #4
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800483e:	6939      	ldr	r1, [r7, #16]
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	4613      	mov	r3, r2
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	4413      	add	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	440b      	add	r3, r1
 800484c:	3320      	adds	r3, #32
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004852:	6939      	ldr	r1, [r7, #16]
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	4613      	mov	r3, r2
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	4413      	add	r3, r2
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	440b      	add	r3, r1
 8004860:	3328      	adds	r3, #40	; 0x28
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004866:	6939      	ldr	r1, [r7, #16]
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	4613      	mov	r3, r2
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	4413      	add	r3, r2
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	440b      	add	r3, r1
 8004874:	3324      	adds	r3, #36	; 0x24
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800487a:	6939      	ldr	r1, [r7, #16]
 800487c:	69fa      	ldr	r2, [r7, #28]
 800487e:	4613      	mov	r3, r2
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	4413      	add	r3, r2
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	440b      	add	r3, r1
 8004888:	332c      	adds	r3, #44	; 0x2c
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800488e:	f3bf 8f5f 	dmb	sy
 8004892:	e002      	b.n	800489a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004894:	f04f 33ff 	mov.w	r3, #4294967295
 8004898:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80048a0:	69fb      	ldr	r3, [r7, #28]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3720      	adds	r7, #32
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	200143f4 	.word	0x200143f4

080048b0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80048be:	4b33      	ldr	r3, [pc, #204]	; (800498c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80048cc:	f7ff fe8e 	bl	80045ec <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80048d0:	4b2e      	ldr	r3, [pc, #184]	; (800498c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80048d2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	461a      	mov	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4293      	cmp	r3, r2
 80048de:	d24d      	bcs.n	800497c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80048e0:	f3ef 8311 	mrs	r3, BASEPRI
 80048e4:	f04f 0120 	mov.w	r1, #32
 80048e8:	f381 8811 	msr	BASEPRI, r1
 80048ec:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d031      	beq.n	8004958 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80048f4:	6979      	ldr	r1, [r7, #20]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	440b      	add	r3, r1
 8004902:	3360      	adds	r3, #96	; 0x60
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004908:	6979      	ldr	r1, [r7, #20]
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4613      	mov	r3, r2
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	4413      	add	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	440b      	add	r3, r1
 8004916:	3364      	adds	r3, #100	; 0x64
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800491c:	6979      	ldr	r1, [r7, #20]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4613      	mov	r3, r2
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	4413      	add	r3, r2
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	440b      	add	r3, r1
 800492a:	3368      	adds	r3, #104	; 0x68
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004930:	6979      	ldr	r1, [r7, #20]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4613      	mov	r3, r2
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	4413      	add	r3, r2
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	440b      	add	r3, r1
 800493e:	3370      	adds	r3, #112	; 0x70
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004944:	6979      	ldr	r1, [r7, #20]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4613      	mov	r3, r2
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	4413      	add	r3, r2
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	440b      	add	r3, r1
 8004952:	336c      	adds	r3, #108	; 0x6c
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004958:	6979      	ldr	r1, [r7, #20]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4613      	mov	r3, r2
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	4413      	add	r3, r2
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	440b      	add	r3, r1
 8004966:	3374      	adds	r3, #116	; 0x74
 8004968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800496a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800496c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004976:	2300      	movs	r3, #0
 8004978:	61fb      	str	r3, [r7, #28]
 800497a:	e002      	b.n	8004982 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800497c:	f04f 33ff 	mov.w	r3, #4294967295
 8004980:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004982:	69fb      	ldr	r3, [r7, #28]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3720      	adds	r7, #32
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	200143f4 	.word	0x200143f4

08004990 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80049a0:	e002      	b.n	80049a8 <_EncodeStr+0x18>
    Len++;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	3301      	adds	r3, #1
 80049a6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4413      	add	r3, r2
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f6      	bne.n	80049a2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d901      	bls.n	80049c0 <_EncodeStr+0x30>
    Len = Limit;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	2bfe      	cmp	r3, #254	; 0xfe
 80049c4:	d806      	bhi.n	80049d4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	60fa      	str	r2, [r7, #12]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	e011      	b.n	80049f8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	60fa      	str	r2, [r7, #12]
 80049da:	22ff      	movs	r2, #255	; 0xff
 80049dc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	60fa      	str	r2, [r7, #12]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	0a19      	lsrs	r1, r3, #8
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	60fa      	str	r2, [r7, #12]
 80049f4:	b2ca      	uxtb	r2, r1
 80049f6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80049f8:	2300      	movs	r3, #0
 80049fa:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80049fc:	e00a      	b.n	8004a14 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	1c53      	adds	r3, r2, #1
 8004a02:	60bb      	str	r3, [r7, #8]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	1c59      	adds	r1, r3, #1
 8004a08:	60f9      	str	r1, [r7, #12]
 8004a0a:	7812      	ldrb	r2, [r2, #0]
 8004a0c:	701a      	strb	r2, [r3, #0]
    n++;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	3301      	adds	r3, #1
 8004a12:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d3f0      	bcc.n	80049fe <_EncodeStr+0x6e>
  }
  return pPayload;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	371c      	adds	r7, #28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3304      	adds	r3, #4
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
	...

08004a44 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004a4a:	4b36      	ldr	r3, [pc, #216]	; (8004b24 <_HandleIncomingPacket+0xe0>)
 8004a4c:	7e1b      	ldrb	r3, [r3, #24]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	1cfb      	adds	r3, r7, #3
 8004a52:	2201      	movs	r2, #1
 8004a54:	4619      	mov	r1, r3
 8004a56:	f7ff fe21 	bl	800469c <SEGGER_RTT_ReadNoLock>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	dd54      	ble.n	8004b0e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	2b80      	cmp	r3, #128	; 0x80
 8004a68:	d032      	beq.n	8004ad0 <_HandleIncomingPacket+0x8c>
 8004a6a:	2b80      	cmp	r3, #128	; 0x80
 8004a6c:	dc42      	bgt.n	8004af4 <_HandleIncomingPacket+0xb0>
 8004a6e:	2b07      	cmp	r3, #7
 8004a70:	dc16      	bgt.n	8004aa0 <_HandleIncomingPacket+0x5c>
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	dd3e      	ble.n	8004af4 <_HandleIncomingPacket+0xb0>
 8004a76:	3b01      	subs	r3, #1
 8004a78:	2b06      	cmp	r3, #6
 8004a7a:	d83b      	bhi.n	8004af4 <_HandleIncomingPacket+0xb0>
 8004a7c:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <_HandleIncomingPacket+0x40>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004aa7 	.word	0x08004aa7
 8004a88:	08004aad 	.word	0x08004aad
 8004a8c:	08004ab3 	.word	0x08004ab3
 8004a90:	08004ab9 	.word	0x08004ab9
 8004a94:	08004abf 	.word	0x08004abf
 8004a98:	08004ac5 	.word	0x08004ac5
 8004a9c:	08004acb 	.word	0x08004acb
 8004aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8004aa2:	d036      	beq.n	8004b12 <_HandleIncomingPacket+0xce>
 8004aa4:	e026      	b.n	8004af4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004aa6:	f000 fba7 	bl	80051f8 <SEGGER_SYSVIEW_Start>
      break;
 8004aaa:	e037      	b.n	8004b1c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004aac:	f000 fc5e 	bl	800536c <SEGGER_SYSVIEW_Stop>
      break;
 8004ab0:	e034      	b.n	8004b1c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004ab2:	f000 fe37 	bl	8005724 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004ab6:	e031      	b.n	8004b1c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004ab8:	f000 fdfc 	bl	80056b4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004abc:	e02e      	b.n	8004b1c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004abe:	f000 fc7b 	bl	80053b8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004ac2:	e02b      	b.n	8004b1c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004ac4:	f001 f8ca 	bl	8005c5c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004ac8:	e028      	b.n	8004b1c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004aca:	f001 f8a9 	bl	8005c20 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004ace:	e025      	b.n	8004b1c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004ad0:	4b14      	ldr	r3, [pc, #80]	; (8004b24 <_HandleIncomingPacket+0xe0>)
 8004ad2:	7e1b      	ldrb	r3, [r3, #24]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	1cfb      	adds	r3, r7, #3
 8004ad8:	2201      	movs	r2, #1
 8004ada:	4619      	mov	r1, r3
 8004adc:	f7ff fdde 	bl	800469c <SEGGER_RTT_ReadNoLock>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	dd15      	ble.n	8004b16 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004aea:	78fb      	ldrb	r3, [r7, #3]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f001 f817 	bl	8005b20 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004af2:	e010      	b.n	8004b16 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	b25b      	sxtb	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	da0e      	bge.n	8004b1a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004afc:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <_HandleIncomingPacket+0xe0>)
 8004afe:	7e1b      	ldrb	r3, [r3, #24]
 8004b00:	4618      	mov	r0, r3
 8004b02:	1cfb      	adds	r3, r7, #3
 8004b04:	2201      	movs	r2, #1
 8004b06:	4619      	mov	r1, r3
 8004b08:	f7ff fdc8 	bl	800469c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004b0c:	e005      	b.n	8004b1a <_HandleIncomingPacket+0xd6>
    }
  }
 8004b0e:	bf00      	nop
 8004b10:	e004      	b.n	8004b1c <_HandleIncomingPacket+0xd8>
      break;
 8004b12:	bf00      	nop
 8004b14:	e002      	b.n	8004b1c <_HandleIncomingPacket+0xd8>
      break;
 8004b16:	bf00      	nop
 8004b18:	e000      	b.n	8004b1c <_HandleIncomingPacket+0xd8>
      break;
 8004b1a:	bf00      	nop
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20014254 	.word	0x20014254

08004b28 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08c      	sub	sp, #48	; 0x30
 8004b2c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004b2e:	2301      	movs	r3, #1
 8004b30:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004b32:	1d3b      	adds	r3, r7, #4
 8004b34:	3301      	adds	r3, #1
 8004b36:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b3c:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <_TrySendOverflowPacket+0xdc>)
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b42:	e00b      	b.n	8004b5c <_TrySendOverflowPacket+0x34>
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4a:	1c59      	adds	r1, r3, #1
 8004b4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b58:	09db      	lsrs	r3, r3, #7
 8004b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8004b60:	d8f0      	bhi.n	8004b44 <_TrySendOverflowPacket+0x1c>
 8004b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b70:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b72:	4b25      	ldr	r3, [pc, #148]	; (8004c08 <_TrySendOverflowPacket+0xe0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004b78:	4b22      	ldr	r3, [pc, #136]	; (8004c04 <_TrySendOverflowPacket+0xdc>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	623b      	str	r3, [r7, #32]
 8004b8a:	e00b      	b.n	8004ba4 <_TrySendOverflowPacket+0x7c>
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	1c59      	adds	r1, r3, #1
 8004b94:	6279      	str	r1, [r7, #36]	; 0x24
 8004b96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	701a      	strb	r2, [r3, #0]
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	09db      	lsrs	r3, r3, #7
 8004ba2:	623b      	str	r3, [r7, #32]
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ba8:	d8f0      	bhi.n	8004b8c <_TrySendOverflowPacket+0x64>
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	627a      	str	r2, [r7, #36]	; 0x24
 8004bb0:	6a3a      	ldr	r2, [r7, #32]
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004bba:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <_TrySendOverflowPacket+0xdc>)
 8004bbc:	785b      	ldrb	r3, [r3, #1]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	1d3b      	adds	r3, r7, #4
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	1d3b      	adds	r3, r7, #4
 8004bca:	4619      	mov	r1, r3
 8004bcc:	f7fb fb08 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004bda:	4a0a      	ldr	r2, [pc, #40]	; (8004c04 <_TrySendOverflowPacket+0xdc>)
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004be0:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <_TrySendOverflowPacket+0xdc>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <_TrySendOverflowPacket+0xdc>)
 8004bea:	701a      	strb	r2, [r3, #0]
 8004bec:	e004      	b.n	8004bf8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <_TrySendOverflowPacket+0xdc>)
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	4a03      	ldr	r2, [pc, #12]	; (8004c04 <_TrySendOverflowPacket+0xdc>)
 8004bf6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004bf8:	693b      	ldr	r3, [r7, #16]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3730      	adds	r7, #48	; 0x30
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	20014254 	.word	0x20014254
 8004c08:	e0001004 	.word	0xe0001004

08004c0c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	; 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004c18:	4b6c      	ldr	r3, [pc, #432]	; (8004dcc <_SendPacket+0x1c0>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d010      	beq.n	8004c42 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004c20:	4b6a      	ldr	r3, [pc, #424]	; (8004dcc <_SendPacket+0x1c0>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 80a3 	beq.w	8004d70 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004c2a:	4b68      	ldr	r3, [pc, #416]	; (8004dcc <_SendPacket+0x1c0>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d109      	bne.n	8004c46 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004c32:	f7ff ff79 	bl	8004b28 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004c36:	4b65      	ldr	r3, [pc, #404]	; (8004dcc <_SendPacket+0x1c0>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	f040 809a 	bne.w	8004d74 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004c40:	e001      	b.n	8004c46 <_SendPacket+0x3a>
    goto Send;
 8004c42:	bf00      	nop
 8004c44:	e000      	b.n	8004c48 <_SendPacket+0x3c>
Send:
 8004c46:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b1f      	cmp	r3, #31
 8004c4c:	d809      	bhi.n	8004c62 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004c4e:	4b5f      	ldr	r3, [pc, #380]	; (8004dcc <_SendPacket+0x1c0>)
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f040 808b 	bne.w	8004d78 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b17      	cmp	r3, #23
 8004c66:	d807      	bhi.n	8004c78 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	701a      	strb	r2, [r3, #0]
 8004c76:	e03d      	b.n	8004cf4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	2b7f      	cmp	r3, #127	; 0x7f
 8004c84:	d912      	bls.n	8004cac <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	09da      	lsrs	r2, r3, #7
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	3a01      	subs	r2, #1
 8004c9e:	60fa      	str	r2, [r7, #12]
 8004ca0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	e006      	b.n	8004cba <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b7f      	cmp	r3, #127	; 0x7f
 8004cbe:	d912      	bls.n	8004ce6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	09da      	lsrs	r2, r3, #7
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	3a01      	subs	r2, #1
 8004cd8:	60fa      	str	r2, [r7, #12]
 8004cda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	e006      	b.n	8004cf4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004cf4:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <_SendPacket+0x1c4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004cfa:	4b34      	ldr	r3, [pc, #208]	; (8004dcc <_SendPacket+0x1c0>)
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	623b      	str	r3, [r7, #32]
 8004d0c:	e00b      	b.n	8004d26 <_SendPacket+0x11a>
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	1c59      	adds	r1, r3, #1
 8004d16:	6279      	str	r1, [r7, #36]	; 0x24
 8004d18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	09db      	lsrs	r3, r3, #7
 8004d24:	623b      	str	r3, [r7, #32]
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	2b7f      	cmp	r3, #127	; 0x7f
 8004d2a:	d8f0      	bhi.n	8004d0e <_SendPacket+0x102>
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	627a      	str	r2, [r7, #36]	; 0x24
 8004d32:	6a3a      	ldr	r2, [r7, #32]
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004d3c:	4b23      	ldr	r3, [pc, #140]	; (8004dcc <_SendPacket+0x1c0>)
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	4618      	mov	r0, r3
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	68f9      	ldr	r1, [r7, #12]
 8004d4c:	f7fb fa48 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004d50:	4603      	mov	r3, r0
 8004d52:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004d5a:	4a1c      	ldr	r2, [pc, #112]	; (8004dcc <_SendPacket+0x1c0>)
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	60d3      	str	r3, [r2, #12]
 8004d60:	e00b      	b.n	8004d7a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004d62:	4b1a      	ldr	r3, [pc, #104]	; (8004dcc <_SendPacket+0x1c0>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	3301      	adds	r3, #1
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	4b18      	ldr	r3, [pc, #96]	; (8004dcc <_SendPacket+0x1c0>)
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e004      	b.n	8004d7a <_SendPacket+0x16e>
    goto SendDone;
 8004d70:	bf00      	nop
 8004d72:	e002      	b.n	8004d7a <_SendPacket+0x16e>
      goto SendDone;
 8004d74:	bf00      	nop
 8004d76:	e000      	b.n	8004d7a <_SendPacket+0x16e>
      goto SendDone;
 8004d78:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004d7a:	4b14      	ldr	r3, [pc, #80]	; (8004dcc <_SendPacket+0x1c0>)
 8004d7c:	7e1b      	ldrb	r3, [r3, #24]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4a14      	ldr	r2, [pc, #80]	; (8004dd4 <_SendPacket+0x1c8>)
 8004d82:	460b      	mov	r3, r1
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	440b      	add	r3, r1
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	336c      	adds	r3, #108	; 0x6c
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4b0e      	ldr	r3, [pc, #56]	; (8004dcc <_SendPacket+0x1c0>)
 8004d92:	7e1b      	ldrb	r3, [r3, #24]
 8004d94:	4618      	mov	r0, r3
 8004d96:	490f      	ldr	r1, [pc, #60]	; (8004dd4 <_SendPacket+0x1c8>)
 8004d98:	4603      	mov	r3, r0
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	4403      	add	r3, r0
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	440b      	add	r3, r1
 8004da2:	3370      	adds	r3, #112	; 0x70
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d00b      	beq.n	8004dc2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004daa:	4b08      	ldr	r3, [pc, #32]	; (8004dcc <_SendPacket+0x1c0>)
 8004dac:	789b      	ldrb	r3, [r3, #2]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d107      	bne.n	8004dc2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <_SendPacket+0x1c0>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004db8:	f7ff fe44 	bl	8004a44 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004dbc:	4b03      	ldr	r3, [pc, #12]	; (8004dcc <_SendPacket+0x1c0>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004dc2:	bf00      	nop
 8004dc4:	3728      	adds	r7, #40	; 0x28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20014254 	.word	0x20014254
 8004dd0:	e0001004 	.word	0xe0001004
 8004dd4:	200143f4 	.word	0x200143f4

08004dd8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004de6:	2300      	movs	r3, #0
 8004de8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004dec:	4917      	ldr	r1, [pc, #92]	; (8004e4c <SEGGER_SYSVIEW_Init+0x74>)
 8004dee:	4818      	ldr	r0, [pc, #96]	; (8004e50 <SEGGER_SYSVIEW_Init+0x78>)
 8004df0:	f7ff fcda 	bl	80047a8 <SEGGER_RTT_AllocUpBuffer>
 8004df4:	4603      	mov	r3, r0
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	4b16      	ldr	r3, [pc, #88]	; (8004e54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dfa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004dfc:	4b15      	ldr	r3, [pc, #84]	; (8004e54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004dfe:	785a      	ldrb	r2, [r3, #1]
 8004e00:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e02:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004e04:	4b13      	ldr	r3, [pc, #76]	; (8004e54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e06:	7e1b      	ldrb	r3, [r3, #24]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	2308      	movs	r3, #8
 8004e10:	4a11      	ldr	r2, [pc, #68]	; (8004e58 <SEGGER_SYSVIEW_Init+0x80>)
 8004e12:	490f      	ldr	r1, [pc, #60]	; (8004e50 <SEGGER_SYSVIEW_Init+0x78>)
 8004e14:	f7ff fd4c 	bl	80048b0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004e18:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <SEGGER_SYSVIEW_Init+0x84>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a0c      	ldr	r2, [pc, #48]	; (8004e54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e24:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004e26:	4a0b      	ldr	r2, [pc, #44]	; (8004e54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004e2c:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004e32:	4a08      	ldr	r2, [pc, #32]	; (8004e54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004e38:	4a06      	ldr	r2, [pc, #24]	; (8004e54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004e3e:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <SEGGER_SYSVIEW_Init+0x7c>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	2001324c 	.word	0x2001324c
 8004e50:	08005f70 	.word	0x08005f70
 8004e54:	20014254 	.word	0x20014254
 8004e58:	2001424c 	.word	0x2001424c
 8004e5c:	e0001004 	.word	0xe0001004

08004e60 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004e68:	4a04      	ldr	r2, [pc, #16]	; (8004e7c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6113      	str	r3, [r2, #16]
}
 8004e6e:	bf00      	nop
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20014254 	.word	0x20014254

08004e80 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e88:	f3ef 8311 	mrs	r3, BASEPRI
 8004e8c:	f04f 0120 	mov.w	r1, #32
 8004e90:	f381 8811 	msr	BASEPRI, r1
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	4808      	ldr	r0, [pc, #32]	; (8004eb8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004e98:	f7ff fdc7 	bl	8004a2a <_PreparePacket>
 8004e9c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	68b8      	ldr	r0, [r7, #8]
 8004ea4:	f7ff feb2 	bl	8004c0c <_SendPacket>
  RECORD_END();
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f383 8811 	msr	BASEPRI, r3
}
 8004eae:	bf00      	nop
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20014284 	.word	0x20014284

08004ebc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ec6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eca:	f04f 0120 	mov.w	r1, #32
 8004ece:	f381 8811 	msr	BASEPRI, r1
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	4816      	ldr	r0, [pc, #88]	; (8004f30 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004ed6:	f7ff fda8 	bl	8004a2a <_PreparePacket>
 8004eda:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	61fb      	str	r3, [r7, #28]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	e00b      	b.n	8004f02 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	1c59      	adds	r1, r3, #1
 8004ef2:	61f9      	str	r1, [r7, #28]
 8004ef4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	09db      	lsrs	r3, r3, #7
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	2b7f      	cmp	r3, #127	; 0x7f
 8004f06:	d8f0      	bhi.n	8004eea <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	61fa      	str	r2, [r7, #28]
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	6938      	ldr	r0, [r7, #16]
 8004f1e:	f7ff fe75 	bl	8004c0c <_SendPacket>
  RECORD_END();
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f383 8811 	msr	BASEPRI, r3
}
 8004f28:	bf00      	nop
 8004f2a:	3720      	adds	r7, #32
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	20014284 	.word	0x20014284

08004f34 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08c      	sub	sp, #48	; 0x30
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f40:	f3ef 8311 	mrs	r3, BASEPRI
 8004f44:	f04f 0120 	mov.w	r1, #32
 8004f48:	f381 8811 	msr	BASEPRI, r1
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	4825      	ldr	r0, [pc, #148]	; (8004fe4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004f50:	f7ff fd6b 	bl	8004a2a <_PreparePacket>
 8004f54:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f62:	e00b      	b.n	8004f7c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6a:	1c59      	adds	r1, r3, #1
 8004f6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	09db      	lsrs	r3, r3, #7
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f80:	d8f0      	bhi.n	8004f64 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	623b      	str	r3, [r7, #32]
 8004f9a:	e00b      	b.n	8004fb4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	1c59      	adds	r1, r3, #1
 8004fa4:	6279      	str	r1, [r7, #36]	; 0x24
 8004fa6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	09db      	lsrs	r3, r3, #7
 8004fb2:	623b      	str	r3, [r7, #32]
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	2b7f      	cmp	r3, #127	; 0x7f
 8004fb8:	d8f0      	bhi.n	8004f9c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	627a      	str	r2, [r7, #36]	; 0x24
 8004fc0:	6a3a      	ldr	r2, [r7, #32]
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	6979      	ldr	r1, [r7, #20]
 8004fce:	69b8      	ldr	r0, [r7, #24]
 8004fd0:	f7ff fe1c 	bl	8004c0c <_SendPacket>
  RECORD_END();
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f383 8811 	msr	BASEPRI, r3
}
 8004fda:	bf00      	nop
 8004fdc:	3730      	adds	r7, #48	; 0x30
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20014284 	.word	0x20014284

08004fe8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08e      	sub	sp, #56	; 0x38
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8004ffa:	f04f 0120 	mov.w	r1, #32
 8004ffe:	f381 8811 	msr	BASEPRI, r1
 8005002:	61fb      	str	r3, [r7, #28]
 8005004:	4832      	ldr	r0, [pc, #200]	; (80050d0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005006:	f7ff fd10 	bl	8004a2a <_PreparePacket>
 800500a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	637b      	str	r3, [r7, #52]	; 0x34
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	633b      	str	r3, [r7, #48]	; 0x30
 8005018:	e00b      	b.n	8005032 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	b2da      	uxtb	r2, r3
 800501e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005020:	1c59      	adds	r1, r3, #1
 8005022:	6379      	str	r1, [r7, #52]	; 0x34
 8005024:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502e:	09db      	lsrs	r3, r3, #7
 8005030:	633b      	str	r3, [r7, #48]	; 0x30
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	2b7f      	cmp	r3, #127	; 0x7f
 8005036:	d8f0      	bhi.n	800501a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	637a      	str	r2, [r7, #52]	; 0x34
 800503e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005046:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005050:	e00b      	b.n	800506a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	b2da      	uxtb	r2, r3
 8005056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005058:	1c59      	adds	r1, r3, #1
 800505a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800505c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	09db      	lsrs	r3, r3, #7
 8005068:	62bb      	str	r3, [r7, #40]	; 0x28
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	2b7f      	cmp	r3, #127	; 0x7f
 800506e:	d8f0      	bhi.n	8005052 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	623b      	str	r3, [r7, #32]
 8005088:	e00b      	b.n	80050a2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	b2da      	uxtb	r2, r3
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	1c59      	adds	r1, r3, #1
 8005092:	6279      	str	r1, [r7, #36]	; 0x24
 8005094:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	701a      	strb	r2, [r3, #0]
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	09db      	lsrs	r3, r3, #7
 80050a0:	623b      	str	r3, [r7, #32]
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	2b7f      	cmp	r3, #127	; 0x7f
 80050a6:	d8f0      	bhi.n	800508a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	627a      	str	r2, [r7, #36]	; 0x24
 80050ae:	6a3a      	ldr	r2, [r7, #32]
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	6979      	ldr	r1, [r7, #20]
 80050bc:	69b8      	ldr	r0, [r7, #24]
 80050be:	f7ff fda5 	bl	8004c0c <_SendPacket>
  RECORD_END();
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	f383 8811 	msr	BASEPRI, r3
}
 80050c8:	bf00      	nop
 80050ca:	3738      	adds	r7, #56	; 0x38
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20014284 	.word	0x20014284

080050d4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b090      	sub	sp, #64	; 0x40
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80050e2:	f3ef 8311 	mrs	r3, BASEPRI
 80050e6:	f04f 0120 	mov.w	r1, #32
 80050ea:	f381 8811 	msr	BASEPRI, r1
 80050ee:	61fb      	str	r3, [r7, #28]
 80050f0:	4840      	ldr	r0, [pc, #256]	; (80051f4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80050f2:	f7ff fc9a 	bl	8004a2a <_PreparePacket>
 80050f6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	63bb      	str	r3, [r7, #56]	; 0x38
 8005104:	e00b      	b.n	800511e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005108:	b2da      	uxtb	r2, r3
 800510a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510c:	1c59      	adds	r1, r3, #1
 800510e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005110:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	701a      	strb	r2, [r3, #0]
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	09db      	lsrs	r3, r3, #7
 800511c:	63bb      	str	r3, [r7, #56]	; 0x38
 800511e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005120:	2b7f      	cmp	r3, #127	; 0x7f
 8005122:	d8f0      	bhi.n	8005106 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	63fa      	str	r2, [r7, #60]	; 0x3c
 800512a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005132:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	637b      	str	r3, [r7, #52]	; 0x34
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	633b      	str	r3, [r7, #48]	; 0x30
 800513c:	e00b      	b.n	8005156 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	b2da      	uxtb	r2, r3
 8005142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005144:	1c59      	adds	r1, r3, #1
 8005146:	6379      	str	r1, [r7, #52]	; 0x34
 8005148:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	09db      	lsrs	r3, r3, #7
 8005154:	633b      	str	r3, [r7, #48]	; 0x30
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	2b7f      	cmp	r3, #127	; 0x7f
 800515a:	d8f0      	bhi.n	800513e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800515c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	637a      	str	r2, [r7, #52]	; 0x34
 8005162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	62bb      	str	r3, [r7, #40]	; 0x28
 8005174:	e00b      	b.n	800518e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	b2da      	uxtb	r2, r3
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	1c59      	adds	r1, r3, #1
 800517e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005180:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	701a      	strb	r2, [r3, #0]
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	09db      	lsrs	r3, r3, #7
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	2b7f      	cmp	r3, #127	; 0x7f
 8005192:	d8f0      	bhi.n	8005176 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	62fa      	str	r2, [r7, #44]	; 0x2c
 800519a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800519c:	b2d2      	uxtb	r2, r2
 800519e:	701a      	strb	r2, [r3, #0]
 80051a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
 80051a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051aa:	623b      	str	r3, [r7, #32]
 80051ac:	e00b      	b.n	80051c6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	1c59      	adds	r1, r3, #1
 80051b6:	6279      	str	r1, [r7, #36]	; 0x24
 80051b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	09db      	lsrs	r3, r3, #7
 80051c4:	623b      	str	r3, [r7, #32]
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	2b7f      	cmp	r3, #127	; 0x7f
 80051ca:	d8f0      	bhi.n	80051ae <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	627a      	str	r2, [r7, #36]	; 0x24
 80051d2:	6a3a      	ldr	r2, [r7, #32]
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	701a      	strb	r2, [r3, #0]
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	6979      	ldr	r1, [r7, #20]
 80051e0:	69b8      	ldr	r0, [r7, #24]
 80051e2:	f7ff fd13 	bl	8004c0c <_SendPacket>
  RECORD_END();
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f383 8811 	msr	BASEPRI, r3
}
 80051ec:	bf00      	nop
 80051ee:	3740      	adds	r7, #64	; 0x40
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	20014284 	.word	0x20014284

080051f8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08c      	sub	sp, #48	; 0x30
 80051fc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80051fe:	4b58      	ldr	r3, [pc, #352]	; (8005360 <SEGGER_SYSVIEW_Start+0x168>)
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005204:	f3ef 8311 	mrs	r3, BASEPRI
 8005208:	f04f 0120 	mov.w	r1, #32
 800520c:	f381 8811 	msr	BASEPRI, r1
 8005210:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005212:	4b53      	ldr	r3, [pc, #332]	; (8005360 <SEGGER_SYSVIEW_Start+0x168>)
 8005214:	785b      	ldrb	r3, [r3, #1]
 8005216:	220a      	movs	r2, #10
 8005218:	4952      	ldr	r1, [pc, #328]	; (8005364 <SEGGER_SYSVIEW_Start+0x16c>)
 800521a:	4618      	mov	r0, r3
 800521c:	f7fa ffe0 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005226:	200a      	movs	r0, #10
 8005228:	f7ff fe2a 	bl	8004e80 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800522c:	f3ef 8311 	mrs	r3, BASEPRI
 8005230:	f04f 0120 	mov.w	r1, #32
 8005234:	f381 8811 	msr	BASEPRI, r1
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	484b      	ldr	r0, [pc, #300]	; (8005368 <SEGGER_SYSVIEW_Start+0x170>)
 800523c:	f7ff fbf5 	bl	8004a2a <_PreparePacket>
 8005240:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800524a:	4b45      	ldr	r3, [pc, #276]	; (8005360 <SEGGER_SYSVIEW_Start+0x168>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005250:	e00b      	b.n	800526a <SEGGER_SYSVIEW_Start+0x72>
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	b2da      	uxtb	r2, r3
 8005256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005258:	1c59      	adds	r1, r3, #1
 800525a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800525c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	09db      	lsrs	r3, r3, #7
 8005268:	62bb      	str	r3, [r7, #40]	; 0x28
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	2b7f      	cmp	r3, #127	; 0x7f
 800526e:	d8f0      	bhi.n	8005252 <SEGGER_SYSVIEW_Start+0x5a>
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
 8005284:	4b36      	ldr	r3, [pc, #216]	; (8005360 <SEGGER_SYSVIEW_Start+0x168>)
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	623b      	str	r3, [r7, #32]
 800528a:	e00b      	b.n	80052a4 <SEGGER_SYSVIEW_Start+0xac>
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	b2da      	uxtb	r2, r3
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	1c59      	adds	r1, r3, #1
 8005294:	6279      	str	r1, [r7, #36]	; 0x24
 8005296:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	09db      	lsrs	r3, r3, #7
 80052a2:	623b      	str	r3, [r7, #32]
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	2b7f      	cmp	r3, #127	; 0x7f
 80052a8:	d8f0      	bhi.n	800528c <SEGGER_SYSVIEW_Start+0x94>
 80052aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	627a      	str	r2, [r7, #36]	; 0x24
 80052b0:	6a3a      	ldr	r2, [r7, #32]
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	4b28      	ldr	r3, [pc, #160]	; (8005360 <SEGGER_SYSVIEW_Start+0x168>)
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	61bb      	str	r3, [r7, #24]
 80052c4:	e00b      	b.n	80052de <SEGGER_SYSVIEW_Start+0xe6>
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	1c59      	adds	r1, r3, #1
 80052ce:	61f9      	str	r1, [r7, #28]
 80052d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	09db      	lsrs	r3, r3, #7
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	2b7f      	cmp	r3, #127	; 0x7f
 80052e2:	d8f0      	bhi.n	80052c6 <SEGGER_SYSVIEW_Start+0xce>
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	61fa      	str	r2, [r7, #28]
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	2300      	movs	r3, #0
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	e00b      	b.n	8005316 <SEGGER_SYSVIEW_Start+0x11e>
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	b2da      	uxtb	r2, r3
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	1c59      	adds	r1, r3, #1
 8005306:	6179      	str	r1, [r7, #20]
 8005308:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	09db      	lsrs	r3, r3, #7
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	2b7f      	cmp	r3, #127	; 0x7f
 800531a:	d8f0      	bhi.n	80052fe <SEGGER_SYSVIEW_Start+0x106>
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	617a      	str	r2, [r7, #20]
 8005322:	693a      	ldr	r2, [r7, #16]
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	701a      	strb	r2, [r3, #0]
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800532c:	2218      	movs	r2, #24
 800532e:	6839      	ldr	r1, [r7, #0]
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff fc6b 	bl	8004c0c <_SendPacket>
      RECORD_END();
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800533c:	4b08      	ldr	r3, [pc, #32]	; (8005360 <SEGGER_SYSVIEW_Start+0x168>)
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005344:	4b06      	ldr	r3, [pc, #24]	; (8005360 <SEGGER_SYSVIEW_Start+0x168>)
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800534a:	f000 f9eb 	bl	8005724 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800534e:	f000 f9b1 	bl	80056b4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005352:	f000 fc83 	bl	8005c5c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005356:	bf00      	nop
 8005358:	3730      	adds	r7, #48	; 0x30
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20014254 	.word	0x20014254
 8005364:	08005f98 	.word	0x08005f98
 8005368:	20014284 	.word	0x20014284

0800536c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005372:	f3ef 8311 	mrs	r3, BASEPRI
 8005376:	f04f 0120 	mov.w	r1, #32
 800537a:	f381 8811 	msr	BASEPRI, r1
 800537e:	607b      	str	r3, [r7, #4]
 8005380:	480b      	ldr	r0, [pc, #44]	; (80053b0 <SEGGER_SYSVIEW_Stop+0x44>)
 8005382:	f7ff fb52 	bl	8004a2a <_PreparePacket>
 8005386:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005388:	4b0a      	ldr	r3, [pc, #40]	; (80053b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005390:	220b      	movs	r2, #11
 8005392:	6839      	ldr	r1, [r7, #0]
 8005394:	6838      	ldr	r0, [r7, #0]
 8005396:	f7ff fc39 	bl	8004c0c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800539a:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f383 8811 	msr	BASEPRI, r3
}
 80053a6:	bf00      	nop
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20014284 	.word	0x20014284
 80053b4:	20014254 	.word	0x20014254

080053b8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08c      	sub	sp, #48	; 0x30
 80053bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80053be:	f3ef 8311 	mrs	r3, BASEPRI
 80053c2:	f04f 0120 	mov.w	r1, #32
 80053c6:	f381 8811 	msr	BASEPRI, r1
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	4845      	ldr	r0, [pc, #276]	; (80054e4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80053ce:	f7ff fb2c 	bl	8004a2a <_PreparePacket>
 80053d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053dc:	4b42      	ldr	r3, [pc, #264]	; (80054e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80053e2:	e00b      	b.n	80053fc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ea:	1c59      	adds	r1, r3, #1
 80053ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80053ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	09db      	lsrs	r3, r3, #7
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005400:	d8f0      	bhi.n	80053e4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005410:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	627b      	str	r3, [r7, #36]	; 0x24
 8005416:	4b34      	ldr	r3, [pc, #208]	; (80054e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	623b      	str	r3, [r7, #32]
 800541c:	e00b      	b.n	8005436 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	b2da      	uxtb	r2, r3
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	1c59      	adds	r1, r3, #1
 8005426:	6279      	str	r1, [r7, #36]	; 0x24
 8005428:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800542c:	b2d2      	uxtb	r2, r2
 800542e:	701a      	strb	r2, [r3, #0]
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	09db      	lsrs	r3, r3, #7
 8005434:	623b      	str	r3, [r7, #32]
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	2b7f      	cmp	r3, #127	; 0x7f
 800543a:	d8f0      	bhi.n	800541e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	627a      	str	r2, [r7, #36]	; 0x24
 8005442:	6a3a      	ldr	r2, [r7, #32]
 8005444:	b2d2      	uxtb	r2, r2
 8005446:	701a      	strb	r2, [r3, #0]
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	61fb      	str	r3, [r7, #28]
 8005450:	4b25      	ldr	r3, [pc, #148]	; (80054e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	e00b      	b.n	8005470 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	b2da      	uxtb	r2, r3
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	1c59      	adds	r1, r3, #1
 8005460:	61f9      	str	r1, [r7, #28]
 8005462:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005466:	b2d2      	uxtb	r2, r2
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	09db      	lsrs	r3, r3, #7
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	2b7f      	cmp	r3, #127	; 0x7f
 8005474:	d8f0      	bhi.n	8005458 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	1c5a      	adds	r2, r3, #1
 800547a:	61fa      	str	r2, [r7, #28]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	b2d2      	uxtb	r2, r2
 8005480:	701a      	strb	r2, [r3, #0]
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	2300      	movs	r3, #0
 800548c:	613b      	str	r3, [r7, #16]
 800548e:	e00b      	b.n	80054a8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	b2da      	uxtb	r2, r3
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	1c59      	adds	r1, r3, #1
 8005498:	6179      	str	r1, [r7, #20]
 800549a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	09db      	lsrs	r3, r3, #7
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b7f      	cmp	r3, #127	; 0x7f
 80054ac:	d8f0      	bhi.n	8005490 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	617a      	str	r2, [r7, #20]
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80054be:	2218      	movs	r2, #24
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	68b8      	ldr	r0, [r7, #8]
 80054c4:	f7ff fba2 	bl	8004c0c <_SendPacket>
  RECORD_END();
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80054d6:	4b04      	ldr	r3, [pc, #16]	; (80054e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054da:	4798      	blx	r3
  }
}
 80054dc:	bf00      	nop
 80054de:	3730      	adds	r7, #48	; 0x30
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	20014284 	.word	0x20014284
 80054e8:	20014254 	.word	0x20014254

080054ec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b092      	sub	sp, #72	; 0x48
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80054f4:	f3ef 8311 	mrs	r3, BASEPRI
 80054f8:	f04f 0120 	mov.w	r1, #32
 80054fc:	f381 8811 	msr	BASEPRI, r1
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	486a      	ldr	r0, [pc, #424]	; (80056ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005504:	f7ff fa91 	bl	8004a2a <_PreparePacket>
 8005508:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	647b      	str	r3, [r7, #68]	; 0x44
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	4b66      	ldr	r3, [pc, #408]	; (80056b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	643b      	str	r3, [r7, #64]	; 0x40
 800551e:	e00b      	b.n	8005538 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005522:	b2da      	uxtb	r2, r3
 8005524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005526:	1c59      	adds	r1, r3, #1
 8005528:	6479      	str	r1, [r7, #68]	; 0x44
 800552a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005534:	09db      	lsrs	r3, r3, #7
 8005536:	643b      	str	r3, [r7, #64]	; 0x40
 8005538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800553a:	2b7f      	cmp	r3, #127	; 0x7f
 800553c:	d8f0      	bhi.n	8005520 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800553e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	647a      	str	r2, [r7, #68]	; 0x44
 8005544:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]
 800554a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800554c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	63bb      	str	r3, [r7, #56]	; 0x38
 8005558:	e00b      	b.n	8005572 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	b2da      	uxtb	r2, r3
 800555e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005560:	1c59      	adds	r1, r3, #1
 8005562:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005564:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005568:	b2d2      	uxtb	r2, r2
 800556a:	701a      	strb	r2, [r3, #0]
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	09db      	lsrs	r3, r3, #7
 8005570:	63bb      	str	r3, [r7, #56]	; 0x38
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	2b7f      	cmp	r3, #127	; 0x7f
 8005576:	d8f0      	bhi.n	800555a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800557e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	701a      	strb	r2, [r3, #0]
 8005584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005586:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2220      	movs	r2, #32
 800558e:	4619      	mov	r1, r3
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f7ff f9fd 	bl	8004990 <_EncodeStr>
 8005596:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005598:	2209      	movs	r2, #9
 800559a:	68f9      	ldr	r1, [r7, #12]
 800559c:	6938      	ldr	r0, [r7, #16]
 800559e:	f7ff fb35 	bl	8004c0c <_SendPacket>
  //
  pPayload = pPayloadStart;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	637b      	str	r3, [r7, #52]	; 0x34
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b40      	ldr	r3, [pc, #256]	; (80056b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	633b      	str	r3, [r7, #48]	; 0x30
 80055b6:	e00b      	b.n	80055d0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80055b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055be:	1c59      	adds	r1, r3, #1
 80055c0:	6379      	str	r1, [r7, #52]	; 0x34
 80055c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	09db      	lsrs	r3, r3, #7
 80055ce:	633b      	str	r3, [r7, #48]	; 0x30
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	2b7f      	cmp	r3, #127	; 0x7f
 80055d4:	d8f0      	bhi.n	80055b8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80055d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	637a      	str	r2, [r7, #52]	; 0x34
 80055dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f0:	e00b      	b.n	800560a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f8:	1c59      	adds	r1, r3, #1
 80055fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	09db      	lsrs	r3, r3, #7
 8005608:	62bb      	str	r3, [r7, #40]	; 0x28
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	2b7f      	cmp	r3, #127	; 0x7f
 800560e:	d8f0      	bhi.n	80055f2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	623b      	str	r3, [r7, #32]
 800562a:	e00b      	b.n	8005644 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	b2da      	uxtb	r2, r3
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	1c59      	adds	r1, r3, #1
 8005634:	6279      	str	r1, [r7, #36]	; 0x24
 8005636:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	09db      	lsrs	r3, r3, #7
 8005642:	623b      	str	r3, [r7, #32]
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	2b7f      	cmp	r3, #127	; 0x7f
 8005648:	d8f0      	bhi.n	800562c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	627a      	str	r2, [r7, #36]	; 0x24
 8005650:	6a3a      	ldr	r2, [r7, #32]
 8005652:	b2d2      	uxtb	r2, r2
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	61fb      	str	r3, [r7, #28]
 800565e:	2300      	movs	r3, #0
 8005660:	61bb      	str	r3, [r7, #24]
 8005662:	e00b      	b.n	800567c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	b2da      	uxtb	r2, r3
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	1c59      	adds	r1, r3, #1
 800566c:	61f9      	str	r1, [r7, #28]
 800566e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	09db      	lsrs	r3, r3, #7
 800567a:	61bb      	str	r3, [r7, #24]
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	2b7f      	cmp	r3, #127	; 0x7f
 8005680:	d8f0      	bhi.n	8005664 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	61fa      	str	r2, [r7, #28]
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005692:	2215      	movs	r2, #21
 8005694:	68f9      	ldr	r1, [r7, #12]
 8005696:	6938      	ldr	r0, [r7, #16]
 8005698:	f7ff fab8 	bl	8004c0c <_SendPacket>
  RECORD_END();
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f383 8811 	msr	BASEPRI, r3
}
 80056a2:	bf00      	nop
 80056a4:	3748      	adds	r7, #72	; 0x48
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20014284 	.word	0x20014284
 80056b0:	20014254 	.word	0x20014254

080056b4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80056b8:	4b07      	ldr	r3, [pc, #28]	; (80056d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d008      	beq.n	80056d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80056c0:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80056ca:	4b03      	ldr	r3, [pc, #12]	; (80056d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	4798      	blx	r3
  }
}
 80056d2:	bf00      	nop
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20014254 	.word	0x20014254

080056dc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056e4:	f3ef 8311 	mrs	r3, BASEPRI
 80056e8:	f04f 0120 	mov.w	r1, #32
 80056ec:	f381 8811 	msr	BASEPRI, r1
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	480b      	ldr	r0, [pc, #44]	; (8005720 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80056f4:	f7ff f999 	bl	8004a2a <_PreparePacket>
 80056f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056fa:	2280      	movs	r2, #128	; 0x80
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	6938      	ldr	r0, [r7, #16]
 8005700:	f7ff f946 	bl	8004990 <_EncodeStr>
 8005704:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005706:	220e      	movs	r2, #14
 8005708:	68f9      	ldr	r1, [r7, #12]
 800570a:	6938      	ldr	r0, [r7, #16]
 800570c:	f7ff fa7e 	bl	8004c0c <_SendPacket>
  RECORD_END();
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f383 8811 	msr	BASEPRI, r3
}
 8005716:	bf00      	nop
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20014284 	.word	0x20014284

08005724 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005724:	b590      	push	{r4, r7, lr}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800572a:	4b15      	ldr	r3, [pc, #84]	; (8005780 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d01a      	beq.n	8005768 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005732:	4b13      	ldr	r3, [pc, #76]	; (8005780 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d015      	beq.n	8005768 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800573c:	4b10      	ldr	r3, [pc, #64]	; (8005780 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4798      	blx	r3
 8005744:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005748:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800574a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	000a      	movs	r2, r1
 8005758:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800575a:	4613      	mov	r3, r2
 800575c:	461a      	mov	r2, r3
 800575e:	4621      	mov	r1, r4
 8005760:	200d      	movs	r0, #13
 8005762:	f7ff fbe7 	bl	8004f34 <SEGGER_SYSVIEW_RecordU32x2>
 8005766:	e006      	b.n	8005776 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005768:	4b06      	ldr	r3, [pc, #24]	; (8005784 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4619      	mov	r1, r3
 800576e:	200c      	movs	r0, #12
 8005770:	f7ff fba4 	bl	8004ebc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	bd90      	pop	{r4, r7, pc}
 800577e:	bf00      	nop
 8005780:	20014254 	.word	0x20014254
 8005784:	e0001004 	.word	0xe0001004

08005788 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800578e:	f3ef 8311 	mrs	r3, BASEPRI
 8005792:	f04f 0120 	mov.w	r1, #32
 8005796:	f381 8811 	msr	BASEPRI, r1
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	4819      	ldr	r0, [pc, #100]	; (8005804 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800579e:	f7ff f944 	bl	8004a2a <_PreparePacket>
 80057a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80057a8:	4b17      	ldr	r3, [pc, #92]	; (8005808 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	e00b      	b.n	80057d4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	1c59      	adds	r1, r3, #1
 80057c4:	6179      	str	r1, [r7, #20]
 80057c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	09db      	lsrs	r3, r3, #7
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	2b7f      	cmp	r3, #127	; 0x7f
 80057d8:	d8f0      	bhi.n	80057bc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	1c5a      	adds	r2, r3, #1
 80057de:	617a      	str	r2, [r7, #20]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80057ea:	2202      	movs	r2, #2
 80057ec:	6879      	ldr	r1, [r7, #4]
 80057ee:	68b8      	ldr	r0, [r7, #8]
 80057f0:	f7ff fa0c 	bl	8004c0c <_SendPacket>
  RECORD_END();
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f383 8811 	msr	BASEPRI, r3
}
 80057fa:	bf00      	nop
 80057fc:	3718      	adds	r7, #24
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20014284 	.word	0x20014284
 8005808:	e000ed04 	.word	0xe000ed04

0800580c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005812:	f3ef 8311 	mrs	r3, BASEPRI
 8005816:	f04f 0120 	mov.w	r1, #32
 800581a:	f381 8811 	msr	BASEPRI, r1
 800581e:	607b      	str	r3, [r7, #4]
 8005820:	4807      	ldr	r0, [pc, #28]	; (8005840 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005822:	f7ff f902 	bl	8004a2a <_PreparePacket>
 8005826:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005828:	2203      	movs	r2, #3
 800582a:	6839      	ldr	r1, [r7, #0]
 800582c:	6838      	ldr	r0, [r7, #0]
 800582e:	f7ff f9ed 	bl	8004c0c <_SendPacket>
  RECORD_END();
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f383 8811 	msr	BASEPRI, r3
}
 8005838:	bf00      	nop
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	20014284 	.word	0x20014284

08005844 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800584a:	f3ef 8311 	mrs	r3, BASEPRI
 800584e:	f04f 0120 	mov.w	r1, #32
 8005852:	f381 8811 	msr	BASEPRI, r1
 8005856:	607b      	str	r3, [r7, #4]
 8005858:	4807      	ldr	r0, [pc, #28]	; (8005878 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800585a:	f7ff f8e6 	bl	8004a2a <_PreparePacket>
 800585e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005860:	2212      	movs	r2, #18
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	6838      	ldr	r0, [r7, #0]
 8005866:	f7ff f9d1 	bl	8004c0c <_SendPacket>
  RECORD_END();
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f383 8811 	msr	BASEPRI, r3
}
 8005870:	bf00      	nop
 8005872:	3708      	adds	r7, #8
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	20014284 	.word	0x20014284

0800587c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005882:	f3ef 8311 	mrs	r3, BASEPRI
 8005886:	f04f 0120 	mov.w	r1, #32
 800588a:	f381 8811 	msr	BASEPRI, r1
 800588e:	607b      	str	r3, [r7, #4]
 8005890:	4807      	ldr	r0, [pc, #28]	; (80058b0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005892:	f7ff f8ca 	bl	8004a2a <_PreparePacket>
 8005896:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005898:	2211      	movs	r2, #17
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6838      	ldr	r0, [r7, #0]
 800589e:	f7ff f9b5 	bl	8004c0c <_SendPacket>
  RECORD_END();
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f383 8811 	msr	BASEPRI, r3
}
 80058a8:	bf00      	nop
 80058aa:	3708      	adds	r7, #8
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20014284 	.word	0x20014284

080058b4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058bc:	f3ef 8311 	mrs	r3, BASEPRI
 80058c0:	f04f 0120 	mov.w	r1, #32
 80058c4:	f381 8811 	msr	BASEPRI, r1
 80058c8:	617b      	str	r3, [r7, #20]
 80058ca:	4819      	ldr	r0, [pc, #100]	; (8005930 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80058cc:	f7ff f8ad 	bl	8004a2a <_PreparePacket>
 80058d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80058d6:	4b17      	ldr	r3, [pc, #92]	; (8005934 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	61fb      	str	r3, [r7, #28]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	61bb      	str	r3, [r7, #24]
 80058e8:	e00b      	b.n	8005902 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	1c59      	adds	r1, r3, #1
 80058f2:	61f9      	str	r1, [r7, #28]
 80058f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	09db      	lsrs	r3, r3, #7
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b7f      	cmp	r3, #127	; 0x7f
 8005906:	d8f0      	bhi.n	80058ea <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	61fa      	str	r2, [r7, #28]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005918:	2208      	movs	r2, #8
 800591a:	68f9      	ldr	r1, [r7, #12]
 800591c:	6938      	ldr	r0, [r7, #16]
 800591e:	f7ff f975 	bl	8004c0c <_SendPacket>
  RECORD_END();
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f383 8811 	msr	BASEPRI, r3
}
 8005928:	bf00      	nop
 800592a:	3720      	adds	r7, #32
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	20014284 	.word	0x20014284
 8005934:	20014254 	.word	0x20014254

08005938 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005940:	f3ef 8311 	mrs	r3, BASEPRI
 8005944:	f04f 0120 	mov.w	r1, #32
 8005948:	f381 8811 	msr	BASEPRI, r1
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	4819      	ldr	r0, [pc, #100]	; (80059b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005950:	f7ff f86b 	bl	8004a2a <_PreparePacket>
 8005954:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800595a:	4b17      	ldr	r3, [pc, #92]	; (80059b8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	61fb      	str	r3, [r7, #28]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	61bb      	str	r3, [r7, #24]
 800596c:	e00b      	b.n	8005986 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	1c59      	adds	r1, r3, #1
 8005976:	61f9      	str	r1, [r7, #28]
 8005978:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	09db      	lsrs	r3, r3, #7
 8005984:	61bb      	str	r3, [r7, #24]
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b7f      	cmp	r3, #127	; 0x7f
 800598a:	d8f0      	bhi.n	800596e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	61fa      	str	r2, [r7, #28]
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800599c:	2204      	movs	r2, #4
 800599e:	68f9      	ldr	r1, [r7, #12]
 80059a0:	6938      	ldr	r0, [r7, #16]
 80059a2:	f7ff f933 	bl	8004c0c <_SendPacket>
  RECORD_END();
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f383 8811 	msr	BASEPRI, r3
}
 80059ac:	bf00      	nop
 80059ae:	3720      	adds	r7, #32
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20014284 	.word	0x20014284
 80059b8:	20014254 	.word	0x20014254

080059bc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80059c4:	f3ef 8311 	mrs	r3, BASEPRI
 80059c8:	f04f 0120 	mov.w	r1, #32
 80059cc:	f381 8811 	msr	BASEPRI, r1
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	4819      	ldr	r0, [pc, #100]	; (8005a38 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80059d4:	f7ff f829 	bl	8004a2a <_PreparePacket>
 80059d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80059de:	4b17      	ldr	r3, [pc, #92]	; (8005a3c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	61fb      	str	r3, [r7, #28]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	61bb      	str	r3, [r7, #24]
 80059f0:	e00b      	b.n	8005a0a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	1c59      	adds	r1, r3, #1
 80059fa:	61f9      	str	r1, [r7, #28]
 80059fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	701a      	strb	r2, [r3, #0]
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	09db      	lsrs	r3, r3, #7
 8005a08:	61bb      	str	r3, [r7, #24]
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a0e:	d8f0      	bhi.n	80059f2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	61fa      	str	r2, [r7, #28]
 8005a16:	69ba      	ldr	r2, [r7, #24]
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005a20:	2206      	movs	r2, #6
 8005a22:	68f9      	ldr	r1, [r7, #12]
 8005a24:	6938      	ldr	r0, [r7, #16]
 8005a26:	f7ff f8f1 	bl	8004c0c <_SendPacket>
  RECORD_END();
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f383 8811 	msr	BASEPRI, r3
}
 8005a30:	bf00      	nop
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	20014284 	.word	0x20014284
 8005a3c:	20014254 	.word	0x20014254

08005a40 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08a      	sub	sp, #40	; 0x28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a4a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a4e:	f04f 0120 	mov.w	r1, #32
 8005a52:	f381 8811 	msr	BASEPRI, r1
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	4827      	ldr	r0, [pc, #156]	; (8005af8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005a5a:	f7fe ffe6 	bl	8004a2a <_PreparePacket>
 8005a5e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a64:	4b25      	ldr	r3, [pc, #148]	; (8005afc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	623b      	str	r3, [r7, #32]
 8005a76:	e00b      	b.n	8005a90 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	1c59      	adds	r1, r3, #1
 8005a80:	6279      	str	r1, [r7, #36]	; 0x24
 8005a82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	09db      	lsrs	r3, r3, #7
 8005a8e:	623b      	str	r3, [r7, #32]
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	2b7f      	cmp	r3, #127	; 0x7f
 8005a94:	d8f0      	bhi.n	8005a78 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	627a      	str	r2, [r7, #36]	; 0x24
 8005a9c:	6a3a      	ldr	r2, [r7, #32]
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	61fb      	str	r3, [r7, #28]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	e00b      	b.n	8005ac8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	1c59      	adds	r1, r3, #1
 8005ab8:	61f9      	str	r1, [r7, #28]
 8005aba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	09db      	lsrs	r3, r3, #7
 8005ac6:	61bb      	str	r3, [r7, #24]
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	2b7f      	cmp	r3, #127	; 0x7f
 8005acc:	d8f0      	bhi.n	8005ab0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	61fa      	str	r2, [r7, #28]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005ade:	2207      	movs	r2, #7
 8005ae0:	68f9      	ldr	r1, [r7, #12]
 8005ae2:	6938      	ldr	r0, [r7, #16]
 8005ae4:	f7ff f892 	bl	8004c0c <_SendPacket>
  RECORD_END();
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f383 8811 	msr	BASEPRI, r3
}
 8005aee:	bf00      	nop
 8005af0:	3728      	adds	r7, #40	; 0x28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20014284 	.word	0x20014284
 8005afc:	20014254 	.word	0x20014254

08005b00 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005b08:	4b04      	ldr	r3, [pc, #16]	; (8005b1c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	1ad3      	subs	r3, r2, r3
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	20014254 	.word	0x20014254

08005b20 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08c      	sub	sp, #48	; 0x30
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005b2a:	4b3b      	ldr	r3, [pc, #236]	; (8005c18 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d06d      	beq.n	8005c0e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005b32:	4b39      	ldr	r3, [pc, #228]	; (8005c18 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005b38:	2300      	movs	r3, #0
 8005b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b3c:	e008      	b.n	8005b50 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d007      	beq.n	8005b5a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b50:	79fb      	ldrb	r3, [r7, #7]
 8005b52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d3f2      	bcc.n	8005b3e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005b58:	e000      	b.n	8005b5c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005b5a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d055      	beq.n	8005c0e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b62:	f3ef 8311 	mrs	r3, BASEPRI
 8005b66:	f04f 0120 	mov.w	r1, #32
 8005b6a:	f381 8811 	msr	BASEPRI, r1
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	482a      	ldr	r0, [pc, #168]	; (8005c1c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005b72:	f7fe ff5a 	bl	8004a2a <_PreparePacket>
 8005b76:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	623b      	str	r3, [r7, #32]
 8005b84:	e00b      	b.n	8005b9e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	1c59      	adds	r1, r3, #1
 8005b8e:	6279      	str	r1, [r7, #36]	; 0x24
 8005b90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	701a      	strb	r2, [r3, #0]
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	09db      	lsrs	r3, r3, #7
 8005b9c:	623b      	str	r3, [r7, #32]
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba2:	d8f0      	bhi.n	8005b86 <SEGGER_SYSVIEW_SendModule+0x66>
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	627a      	str	r2, [r7, #36]	; 0x24
 8005baa:	6a3a      	ldr	r2, [r7, #32]
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	61bb      	str	r3, [r7, #24]
 8005bbe:	e00b      	b.n	8005bd8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	1c59      	adds	r1, r3, #1
 8005bc8:	61f9      	str	r1, [r7, #28]
 8005bca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	09db      	lsrs	r3, r3, #7
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	2b7f      	cmp	r3, #127	; 0x7f
 8005bdc:	d8f0      	bhi.n	8005bc0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	61fa      	str	r2, [r7, #28]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2280      	movs	r2, #128	; 0x80
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	68f8      	ldr	r0, [r7, #12]
 8005bf8:	f7fe feca 	bl	8004990 <_EncodeStr>
 8005bfc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005bfe:	2216      	movs	r2, #22
 8005c00:	68f9      	ldr	r1, [r7, #12]
 8005c02:	6938      	ldr	r0, [r7, #16]
 8005c04:	f7ff f802 	bl	8004c0c <_SendPacket>
      RECORD_END();
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005c0e:	bf00      	nop
 8005c10:	3730      	adds	r7, #48	; 0x30
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	2001427c 	.word	0x2001427c
 8005c1c:	20014284 	.word	0x20014284

08005c20 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005c26:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00f      	beq.n	8005c4e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005c2e:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1f2      	bne.n	8005c34 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005c4e:	bf00      	nop
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	2001427c 	.word	0x2001427c

08005c5c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005c62:	f3ef 8311 	mrs	r3, BASEPRI
 8005c66:	f04f 0120 	mov.w	r1, #32
 8005c6a:	f381 8811 	msr	BASEPRI, r1
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	4817      	ldr	r0, [pc, #92]	; (8005cd0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005c72:	f7fe feda 	bl	8004a2a <_PreparePacket>
 8005c76:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	4b14      	ldr	r3, [pc, #80]	; (8005cd4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	613b      	str	r3, [r7, #16]
 8005c86:	e00b      	b.n	8005ca0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	1c59      	adds	r1, r3, #1
 8005c90:	6179      	str	r1, [r7, #20]
 8005c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	09db      	lsrs	r3, r3, #7
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ca4:	d8f0      	bhi.n	8005c88 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	617a      	str	r2, [r7, #20]
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005cb6:	221b      	movs	r2, #27
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	68b8      	ldr	r0, [r7, #8]
 8005cbc:	f7fe ffa6 	bl	8004c0c <_SendPacket>
  RECORD_END();
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f383 8811 	msr	BASEPRI, r3
}
 8005cc6:	bf00      	nop
 8005cc8:	3718      	adds	r7, #24
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20014284 	.word	0x20014284
 8005cd4:	20014280 	.word	0x20014280

08005cd8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08a      	sub	sp, #40	; 0x28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ce0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ce4:	f04f 0120 	mov.w	r1, #32
 8005ce8:	f381 8811 	msr	BASEPRI, r1
 8005cec:	617b      	str	r3, [r7, #20]
 8005cee:	4827      	ldr	r0, [pc, #156]	; (8005d8c <SEGGER_SYSVIEW_Warn+0xb4>)
 8005cf0:	f7fe fe9b 	bl	8004a2a <_PreparePacket>
 8005cf4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cf6:	2280      	movs	r2, #128	; 0x80
 8005cf8:	6879      	ldr	r1, [r7, #4]
 8005cfa:	6938      	ldr	r0, [r7, #16]
 8005cfc:	f7fe fe48 	bl	8004990 <_EncodeStr>
 8005d00:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
 8005d06:	2301      	movs	r3, #1
 8005d08:	623b      	str	r3, [r7, #32]
 8005d0a:	e00b      	b.n	8005d24 <SEGGER_SYSVIEW_Warn+0x4c>
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	1c59      	adds	r1, r3, #1
 8005d14:	6279      	str	r1, [r7, #36]	; 0x24
 8005d16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	6a3b      	ldr	r3, [r7, #32]
 8005d20:	09db      	lsrs	r3, r3, #7
 8005d22:	623b      	str	r3, [r7, #32]
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	2b7f      	cmp	r3, #127	; 0x7f
 8005d28:	d8f0      	bhi.n	8005d0c <SEGGER_SYSVIEW_Warn+0x34>
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	627a      	str	r2, [r7, #36]	; 0x24
 8005d30:	6a3a      	ldr	r2, [r7, #32]
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	61fb      	str	r3, [r7, #28]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	e00b      	b.n	8005d5c <SEGGER_SYSVIEW_Warn+0x84>
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	1c59      	adds	r1, r3, #1
 8005d4c:	61f9      	str	r1, [r7, #28]
 8005d4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	09db      	lsrs	r3, r3, #7
 8005d5a:	61bb      	str	r3, [r7, #24]
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d60:	d8f0      	bhi.n	8005d44 <SEGGER_SYSVIEW_Warn+0x6c>
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	61fa      	str	r2, [r7, #28]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005d72:	221a      	movs	r2, #26
 8005d74:	68f9      	ldr	r1, [r7, #12]
 8005d76:	6938      	ldr	r0, [r7, #16]
 8005d78:	f7fe ff48 	bl	8004c0c <_SendPacket>
  RECORD_END();
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f383 8811 	msr	BASEPRI, r3
}
 8005d82:	bf00      	nop
 8005d84:	3728      	adds	r7, #40	; 0x28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20014284 	.word	0x20014284

08005d90 <__libc_init_array>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	4d0d      	ldr	r5, [pc, #52]	; (8005dc8 <__libc_init_array+0x38>)
 8005d94:	4c0d      	ldr	r4, [pc, #52]	; (8005dcc <__libc_init_array+0x3c>)
 8005d96:	1b64      	subs	r4, r4, r5
 8005d98:	10a4      	asrs	r4, r4, #2
 8005d9a:	2600      	movs	r6, #0
 8005d9c:	42a6      	cmp	r6, r4
 8005d9e:	d109      	bne.n	8005db4 <__libc_init_array+0x24>
 8005da0:	4d0b      	ldr	r5, [pc, #44]	; (8005dd0 <__libc_init_array+0x40>)
 8005da2:	4c0c      	ldr	r4, [pc, #48]	; (8005dd4 <__libc_init_array+0x44>)
 8005da4:	f000 f83c 	bl	8005e20 <_init>
 8005da8:	1b64      	subs	r4, r4, r5
 8005daa:	10a4      	asrs	r4, r4, #2
 8005dac:	2600      	movs	r6, #0
 8005dae:	42a6      	cmp	r6, r4
 8005db0:	d105      	bne.n	8005dbe <__libc_init_array+0x2e>
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db8:	4798      	blx	r3
 8005dba:	3601      	adds	r6, #1
 8005dbc:	e7ee      	b.n	8005d9c <__libc_init_array+0xc>
 8005dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dc2:	4798      	blx	r3
 8005dc4:	3601      	adds	r6, #1
 8005dc6:	e7f2      	b.n	8005dae <__libc_init_array+0x1e>
 8005dc8:	08005fac 	.word	0x08005fac
 8005dcc:	08005fac 	.word	0x08005fac
 8005dd0:	08005fac 	.word	0x08005fac
 8005dd4:	08005fb0 	.word	0x08005fb0

08005dd8 <memcmp>:
 8005dd8:	b530      	push	{r4, r5, lr}
 8005dda:	3901      	subs	r1, #1
 8005ddc:	2400      	movs	r4, #0
 8005dde:	42a2      	cmp	r2, r4
 8005de0:	d101      	bne.n	8005de6 <memcmp+0xe>
 8005de2:	2000      	movs	r0, #0
 8005de4:	e005      	b.n	8005df2 <memcmp+0x1a>
 8005de6:	5d03      	ldrb	r3, [r0, r4]
 8005de8:	3401      	adds	r4, #1
 8005dea:	5d0d      	ldrb	r5, [r1, r4]
 8005dec:	42ab      	cmp	r3, r5
 8005dee:	d0f6      	beq.n	8005dde <memcmp+0x6>
 8005df0:	1b58      	subs	r0, r3, r5
 8005df2:	bd30      	pop	{r4, r5, pc}

08005df4 <memcpy>:
 8005df4:	440a      	add	r2, r1
 8005df6:	4291      	cmp	r1, r2
 8005df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dfc:	d100      	bne.n	8005e00 <memcpy+0xc>
 8005dfe:	4770      	bx	lr
 8005e00:	b510      	push	{r4, lr}
 8005e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e0a:	4291      	cmp	r1, r2
 8005e0c:	d1f9      	bne.n	8005e02 <memcpy+0xe>
 8005e0e:	bd10      	pop	{r4, pc}

08005e10 <memset>:
 8005e10:	4402      	add	r2, r0
 8005e12:	4603      	mov	r3, r0
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d100      	bne.n	8005e1a <memset+0xa>
 8005e18:	4770      	bx	lr
 8005e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e1e:	e7f9      	b.n	8005e14 <memset+0x4>

08005e20 <_init>:
 8005e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e22:	bf00      	nop
 8005e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e26:	bc08      	pop	{r3}
 8005e28:	469e      	mov	lr, r3
 8005e2a:	4770      	bx	lr

08005e2c <_fini>:
 8005e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2e:	bf00      	nop
 8005e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e32:	bc08      	pop	{r3}
 8005e34:	469e      	mov	lr, r3
 8005e36:	4770      	bx	lr
